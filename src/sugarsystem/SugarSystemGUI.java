/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sugarsystem;

import Dao.ParkingDao;
import Dao.SugarDao;
import com.jlrfid.service.AntStruct;
import java.util.Vector;
import com.jlrfid.service.GetReadData;
import com.jlrfid.service.MainHandler;
import com.jlrfid.service.RFIDException;
import entity.Parking;
import entity.Sugar;
import java.sql.Date;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JTable;
import javax.swing.RowSorter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

//class OnecRead implements GetReadData {
//    
//    SugarSystemGUI sugarSystemGUI=new SugarSystemGUI();    
//    public void getReadData(String data, int antNo) {
//        if ("F0".equals(data)) {
//            System.out.println("天线1寻卡结束！");
//        } else if ("F1".equals(data)) {
//            System.out.println("天线2寻卡结束！");
//        } else if ("F2".equals(data)) {
//            System.out.println("天线3寻卡结束！");
//        } else if ("F3".equals(data)) {
//            System.out.println("天线4寻卡结束！");
//        } else if (!"".equals(data)) {
//            System.out.println("数据：" + data + "  天线：" + antNo);
//        }
//        sugarSystemGUI.setReadData(data+",");
//    }
//}
/**
 *
 * @author Administrator
 */
public class SugarSystemGUI extends javax.swing.JFrame implements GetReadData {

    private static String readData;
    int strLength = 0;
    Vector result = new Vector();

    public void getReadData(String data, int antNo) {
        if ("F0".equals(data)) {
            System.out.println("天线1寻卡结束！");
        } else if ("F1".equals(data)) {
            System.out.println("天线2寻卡结束！");
        } else if ("F2".equals(data)) {
            System.out.println("天线3寻卡结束！");
        } else if ("F3".equals(data)) {
            System.out.println("天线4寻卡结束！");
        } else if (!"".equals(data)) {
            System.out.println("数据：" + data + "  天线：" + antNo);
        }
        readData += data + ",";
    }

    /**
     * Creates new form SugarSystemGUI
     */
    public SugarSystemGUI() {
        initComponents();
        //jPanel4.setVisible(false); 
        setTitle("糖厂库存智能信息管理系统");
        jPanel5.setVisible(true);
        jPanel8_input.setVisible(true);
        jPanel9_select.setVisible(false);
        jPanel10_date.setVisible(false);
        jPanel8_car_condition.setVisible(false);
        jPanel8_car.setVisible(false);
                    
    }

//    public void getReadData(String data, int antNo) {
//        if ("F0".equals(data)) {
//            System.out.println("天线1寻卡结束！");
//        } else if ("F1".equals(data)) {
//            System.out.println("天线2寻卡结束！");
//        } else if ("F2".equals(data)) {
//            System.out.println("天线3寻卡结束！");
//        } else if ("F3".equals(data)) {
//            System.out.println("天线4寻卡结束！");
//        } else if (!"".equals(data)) {
//            System.out.println("数据：" + data + "  天线：" + antNo);
//        }
//    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jComboBox2 = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jComboBox1_antNum1Time = new javax.swing.JComboBox<>();
        jComboBox3_antNum1Power = new javax.swing.JComboBox<>();
        jComboBox4_antNum2Time = new javax.swing.JComboBox<>();
        jComboBox5_antNum2Power = new javax.swing.JComboBox<>();
        jComboBox6_antNum3Time = new javax.swing.JComboBox<>();
        jComboBox7_antNum3Power = new javax.swing.JComboBox<>();
        jComboBox8_antNum4Time = new javax.swing.JComboBox<>();
        jComboBox9_antNum4Power = new javax.swing.JComboBox<>();
        jCheckBox1_antNum1 = new javax.swing.JCheckBox();
        jCheckBox2_antNum2 = new javax.swing.JCheckBox();
        jCheckBox3_antNum3 = new javax.swing.JCheckBox();
        jCheckBox4_antNum4 = new javax.swing.JCheckBox();
        jButton1_readAnt = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jTextField2_labelCount = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jTextField3_readCount = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton7_readOnce = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jTextField4_replayConnect = new javax.swing.JTextField();
        jPanel6 = new javax.swing.JPanel();
        jPanel8_input = new javax.swing.JPanel();
        jTextField2_inputMessage = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jPanel9_select = new javax.swing.JPanel();
        jComboBox3_selectMessage = new javax.swing.JComboBox<>();
        jLabel21 = new javax.swing.JLabel();
        jButton7 = new javax.swing.JButton();
        jPanel10_date = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jComboBox4_startYear = new javax.swing.JComboBox<>();
        jLabel12 = new javax.swing.JLabel();
        jComboBox5_startMonth = new javax.swing.JComboBox<>();
        jLabel13 = new javax.swing.JLabel();
        jComboBox6_startDate = new javax.swing.JComboBox<>();
        jLabel14 = new javax.swing.JLabel();
        jComboBox7_endYear = new javax.swing.JComboBox<>();
        jLabel15 = new javax.swing.JLabel();
        jComboBox9_endMonth = new javax.swing.JComboBox<>();
        jLabel16 = new javax.swing.JLabel();
        jComboBox8 = new javax.swing.JComboBox<>();
        jLabel17 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jButton11 = new javax.swing.JButton();
        jPanel8_car = new javax.swing.JPanel();
        jLabel27 = new javax.swing.JLabel();
        jTextField2_car_text = new javax.swing.JTextField();
        jButton12 = new javax.swing.JButton();
        jPanel11 = new javax.swing.JPanel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jTextField3_WeightBR = new javax.swing.JTextField();
        jTextField4_PriceBR = new javax.swing.JTextField();
        jLabel21_priceBW = new javax.swing.JLabel();
        jTextField5_WeightBW = new javax.swing.JTextField();
        jTextField6_PriceBW = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        jTextField7_WeightW = new javax.swing.JTextField();
        jTextField8_PriceW = new javax.swing.JTextField();
        jLabel23 = new javax.swing.JLabel();
        jTextField9_WeightY = new javax.swing.JTextField();
        jTextField10_PriceW = new javax.swing.JTextField();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jTextField11_totalWeight = new javax.swing.JTextField();
        jTextField12_totalPrice = new javax.swing.JTextField();
        jPanel8 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jComboBox1_selectCondition = new javax.swing.JComboBox<>();
        jPanel8_car_condition = new javax.swing.JPanel();
        查询条件 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(1450, 600));
        setMinimumSize(new java.awt.Dimension(1450, 600));
        setPreferredSize(new java.awt.Dimension(1450, 600));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        buttonGroup1.add(jRadioButton1);
        jRadioButton1.setText("串口");
        jRadioButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton1ActionPerformed(evt);
            }
        });

        buttonGroup1.add(jRadioButton2);
        jRadioButton2.setSelected(true);
        jRadioButton2.setText("网口");
        jRadioButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton2ActionPerformed(evt);
            }
        });

        jLabel1.setText("通讯模式");

        jPanel5.setPreferredSize(new java.awt.Dimension(146, 74));

        jComboBox2.setEditable(true);
        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "10.10.100.254" }));
        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });

        jLabel2.setText("端口号");

        jTextField1.setText("8899");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(16, 16, 16)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6))
        );

        jButton2.setText("jButton2");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addComponent(jButton2)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jButton3.setText("连接");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("断开");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("复位");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jRadioButton1)
                        .addGap(31, 31, 31)
                        .addComponent(jRadioButton2))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton5))
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(5, 5, 5)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jRadioButton1)
                    .addComponent(jRadioButton2))
                .addGap(4, 4, 4)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton3)
                        .addComponent(jButton4))
                    .addComponent(jButton5)))
        );

        jLabel3.setText("天线参数");

        jLabel4.setText("工作时间(ms)");

        jLabel5.setText("功率(dbm)");

        jComboBox1_antNum1Time.setEditable(true);
        jComboBox1_antNum1Time.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0", "100", "200", "300", "400", "500", "600", "700", "800", "900", "1000", "1100", "1200", "1300", "1400", "1500", "1600", "1700", "1800", "1900", "2000", "2100", "2200", "2300", "2400", "2500", "2600", "2700", "2800", "2900", "3000", "3100", "3200", "3300", "3400", "3500", "3600", "3700", "3800", "3900", "4000", "4100", "4200", "4300", "4400", "4500", "4600", "4700", "4800", "4900", "5000" }));
        jComboBox1_antNum1Time.setSelectedItem(1000);

        jComboBox3_antNum1Power.setEditable(true);
        jComboBox3_antNum1Power.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "30", "29", "28", "27", "26", "25", "24", "23", "22", "21", "20" }));

        jComboBox4_antNum2Time.setEditable(true);
        jComboBox4_antNum2Time.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0", "100", "200", "300", "400", "500", "600", "700", "800", "900", "1000", "1100", "1200", "1300", "1400", "1500", "1600", "1700", "1800", "1900", "2000", "2100", "2200", "2300", "2400", "2500", "2600", "2700", "2800", "2900", "3000", "3100", "3200", "3300", "3400", "3500", "3600", "3700", "3800", "3900", "4000", "4100", "4200", "4300", "4400", "4500", "4600", "4700", "4800", "4900", "5000" }));
        jComboBox4_antNum2Time.setSelectedItem(1000);

        jComboBox5_antNum2Power.setEditable(true);
        jComboBox5_antNum2Power.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "30", "29", "28", "27", "26", "25", "24", "23", "22", "21", "20" }));

        jComboBox6_antNum3Time.setEditable(true);
        jComboBox6_antNum3Time.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0", "100", "200", "300", "400", "500", "600", "700", "800", "900", "1000", "1100", "1200", "1300", "1400", "1500", "1600", "1700", "1800", "1900", "2000", "2100", "2200", "2300", "2400", "2500", "2600", "2700", "2800", "2900", "3000", "3100", "3200", "3300", "3400", "3500", "3600", "3700", "3800", "3900", "4000", "4100", "4200", "4300", "4400", "4500", "4600", "4700", "4800", "4900", "5000" }));
        jComboBox6_antNum3Time.setSelectedItem(1000);

        jComboBox7_antNum3Power.setEditable(true);
        jComboBox7_antNum3Power.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "30", "29", "28", "27", "26", "25", "24", "23", "22", "21", "20" }));

        jComboBox8_antNum4Time.setEditable(true);
        jComboBox8_antNum4Time.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0", "100", "200", "300", "400", "500", "600", "700", "800", "900", "1000", "1100", "1200", "1300", "1400", "1500", "1600", "1700", "1800", "1900", "2000", "2100", "2200", "2300", "2400", "2500", "2600", "2700", "2800", "2900", "3000", "3100", "3200", "3300", "3400", "3500", "3600", "3700", "3800", "3900", "4000", "4100", "4200", "4300", "4400", "4500", "4600", "4700", "4800", "4900", "5000" }));
        jComboBox8_antNum4Time.setSelectedItem(1000);

        jComboBox9_antNum4Power.setEditable(true);
        jComboBox9_antNum4Power.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "30", "29", "28", "27", "26", "25", "24", "23", "22", "21", "20" }));

        jCheckBox1_antNum1.setText("1号");
        jCheckBox1_antNum1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1_antNum1ActionPerformed(evt);
            }
        });

        jCheckBox2_antNum2.setText("2号");

        jCheckBox3_antNum3.setText("3号");

        jCheckBox4_antNum4.setText("4号");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jLabel3)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBox1_antNum1)
                    .addComponent(jCheckBox2_antNum2)
                    .addComponent(jCheckBox3_antNum3, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jCheckBox4_antNum4, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jComboBox6_antNum3Time, 0, 61, Short.MAX_VALUE)
                    .addComponent(jComboBox4_antNum2Time, javax.swing.GroupLayout.Alignment.LEADING, 0, 1, Short.MAX_VALUE)
                    .addComponent(jComboBox1_antNum1Time, 0, 1, Short.MAX_VALUE)
                    .addComponent(jComboBox8_antNum4Time, 0, 1, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jComboBox5_antNum2Power, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox3_antNum1Power, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox7_antNum3Power, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox9_antNum4Power, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGap(0, 34, Short.MAX_VALUE)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addGap(28, 28, 28))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox1_antNum1Time, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox3_antNum1Power, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBox1_antNum1))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox4_antNum2Time, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox5_antNum2Power, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBox2_antNum2))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox6_antNum3Time, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox7_antNum3Power, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBox3_antNum3))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox8_antNum4Time, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox9_antNum4Power, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBox4_antNum4)))
        );

        jButton1_readAnt.setText("读取");
        jButton1_readAnt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1_readAntActionPerformed(evt);
            }
        });

        jButton6.setText("设置");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jLabel6.setText("标签数");

        jTextField2_labelCount.setText("0");
        jTextField2_labelCount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2_labelCountActionPerformed(evt);
            }
        });

        jLabel7.setText("读取次数");

        jTextField3_readCount.setText("0");
        jTextField3_readCount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField3_readCountActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jButton7_readOnce.setText("寻卡一次");
        jButton7_readOnce.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7_readOnceActionPerformed(evt);
            }
        });

        jButton8.setText("寻卡");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jButton9.setText("停止");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jButton10.setText("清除");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(jButton1_readAnt)
                        .addGap(18, 18, 18)
                        .addComponent(jButton6))
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField4_replayConnect, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField2_labelCount, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField3_readCount, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(21, 21, 21))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addComponent(jButton7_readOnce)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 101, Short.MAX_VALUE)
                        .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(86, 86, 86)
                        .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(114, 114, 114)
                        .addComponent(jButton10, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(61, 61, 61))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton6)
                            .addComponent(jButton1_readAnt))
                        .addGap(18, 18, 18)
                        .addComponent(jTextField4_replayConnect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(36, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField3_readCount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7)
                            .addComponent(jTextField2_labelCount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))
                        .addGap(7, 7, 7)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton7_readOnce, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton10, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(19, 19, 19))))
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1020, -1));

        jLabel9.setText("查询内容");

        jButton1.setText("查询");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel8_inputLayout = new javax.swing.GroupLayout(jPanel8_input);
        jPanel8_input.setLayout(jPanel8_inputLayout);
        jPanel8_inputLayout.setHorizontalGroup(
            jPanel8_inputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8_inputLayout.createSequentialGroup()
                .addGroup(jPanel8_inputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8_inputLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jTextField2_inputMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel8_inputLayout.createSequentialGroup()
                        .addGap(68, 68, 68)
                        .addComponent(jButton1))
                    .addGroup(jPanel8_inputLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel9)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel8_inputLayout.setVerticalGroup(
            jPanel8_inputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8_inputLayout.createSequentialGroup()
                .addComponent(jLabel9)
                .addGap(18, 18, 18)
                .addComponent(jTextField2_inputMessage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jComboBox3_selectMessage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox3_selectMessageActionPerformed(evt);
            }
        });

        jLabel21.setText("查询内容");

        jButton7.setText("查询");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel9_selectLayout = new javax.swing.GroupLayout(jPanel9_select);
        jPanel9_select.setLayout(jPanel9_selectLayout);
        jPanel9_selectLayout.setHorizontalGroup(
            jPanel9_selectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9_selectLayout.createSequentialGroup()
                .addGroup(jPanel9_selectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel9_selectLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jComboBox3_selectMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel9_selectLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel21))
                    .addGroup(jPanel9_selectLayout.createSequentialGroup()
                        .addGap(74, 74, 74)
                        .addComponent(jButton7)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel9_selectLayout.setVerticalGroup(
            jPanel9_selectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel9_selectLayout.createSequentialGroup()
                .addComponent(jLabel21)
                .addGap(18, 18, 18)
                .addComponent(jComboBox3_selectMessage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel10.setText("起始日期：");

        jLabel11.setText("截止日期：");

        jComboBox4_startYear.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "2017", "2016", "2015", "2014", "2013", "2012", "2011", "2010" }));
        jComboBox4_startYear.setToolTipText("");

        jLabel12.setText("年");

        jComboBox5_startMonth.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12" }));

        jLabel13.setText("月");

        jComboBox6_startDate.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31" }));

        jLabel14.setText("日");

        jComboBox7_endYear.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "2017", "2016", "2015", "2014", "2013", "2012", "2011", "2010" }));

        jLabel15.setText("年");

        jComboBox9_endMonth.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12" }));

        jLabel16.setText("月");

        jComboBox8.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31" }));

        jLabel17.setText("日");

        jLabel26.setText("查询内容");

        jButton11.setText("查询");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel10_dateLayout = new javax.swing.GroupLayout(jPanel10_date);
        jPanel10_date.setLayout(jPanel10_dateLayout);
        jPanel10_dateLayout.setHorizontalGroup(
            jPanel10_dateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel26)
            .addGroup(jPanel10_dateLayout.createSequentialGroup()
                .addComponent(jLabel10)
                .addGap(4, 4, 4)
                .addComponent(jComboBox4_startYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jLabel12)
                .addGap(0, 0, 0)
                .addComponent(jComboBox5_startMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jLabel13)
                .addGap(0, 0, 0)
                .addComponent(jComboBox6_startDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel10_dateLayout.createSequentialGroup()
                .addComponent(jLabel11)
                .addGap(4, 4, 4)
                .addComponent(jComboBox7_endYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jLabel15)
                .addGap(0, 0, 0)
                .addComponent(jComboBox9_endMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jLabel16)
                .addGap(0, 0, 0)
                .addComponent(jComboBox8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel10_dateLayout.createSequentialGroup()
                .addGap(96, 96, 96)
                .addComponent(jButton11))
        );
        jPanel10_dateLayout.setVerticalGroup(
            jPanel10_dateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10_dateLayout.createSequentialGroup()
                .addComponent(jLabel26)
                .addGap(4, 4, 4)
                .addGroup(jPanel10_dateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jComboBox4_startYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox5_startMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox6_startDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel10_dateLayout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addGroup(jPanel10_dateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel10)
                            .addComponent(jLabel12)
                            .addComponent(jLabel13)
                            .addComponent(jLabel14))))
                .addGap(6, 6, 6)
                .addGroup(jPanel10_dateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jComboBox7_endYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox9_endMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel10_dateLayout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addGroup(jPanel10_dateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel11)
                            .addComponent(jLabel15)
                            .addComponent(jLabel16)
                            .addComponent(jLabel17))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton11, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel27.setText("查询内容");

        jTextField2_car_text.setToolTipText("");

        jButton12.setText("查询");
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel8_carLayout = new javax.swing.GroupLayout(jPanel8_car);
        jPanel8_car.setLayout(jPanel8_carLayout);
        jPanel8_carLayout.setHorizontalGroup(
            jPanel8_carLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8_carLayout.createSequentialGroup()
                .addGroup(jPanel8_carLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel27)
                    .addComponent(jTextField2_car_text, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 85, Short.MAX_VALUE))
            .addGroup(jPanel8_carLayout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addComponent(jButton12)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel8_carLayout.setVerticalGroup(
            jPanel8_carLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8_carLayout.createSequentialGroup()
                .addComponent(jLabel27)
                .addGap(18, 18, 18)
                .addComponent(jTextField2_car_text, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton12, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addComponent(jPanel8_input, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel9_select, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel10_date, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel8_car, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel8_input, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel9_select, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel10_date, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel8_car, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        getContentPane().add(jPanel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(1030, 130, 1070, 140));

        jPanel11.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel18.setText("特级红糖");
        jPanel11.add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 34, -1, -1));

        jLabel19.setText("总重量（Kg）");
        jPanel11.add(jLabel19, new org.netbeans.lib.awtextra.AbsoluteConstraints(71, 10, -1, -1));

        jLabel20.setText("总价格(元)");
        jPanel11.add(jLabel20, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 10, -1, -1));
        jPanel11.add(jTextField3_WeightBR, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 30, 70, -1));
        jPanel11.add(jTextField4_PriceBR, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 30, 70, -1));

        jLabel21_priceBW.setText("特级白糖");
        jPanel11.add(jLabel21_priceBW, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 65, -1, -1));

        jTextField5_WeightBW.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField5_WeightBWActionPerformed(evt);
            }
        });
        jPanel11.add(jTextField5_WeightBW, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 60, 70, -1));

        jTextField6_PriceBW.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField6_PriceBWActionPerformed(evt);
            }
        });
        jPanel11.add(jTextField6_PriceBW, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 60, 70, -1));

        jLabel22.setText("  白砂糖");
        jPanel11.add(jLabel22, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 96, -1, -1));
        jPanel11.add(jTextField7_WeightW, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 90, 70, -1));
        jPanel11.add(jTextField8_PriceW, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 90, 70, -1));

        jLabel23.setText("    黄糖");
        jPanel11.add(jLabel23, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 127, -1, -1));
        jPanel11.add(jTextField9_WeightY, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 120, 70, -1));
        jPanel11.add(jTextField10_PriceW, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 120, 70, -1));

        jLabel24.setText("合计重量");
        jPanel11.add(jLabel24, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 166, -1, -1));

        jLabel25.setText("合计价格");
        jPanel11.add(jLabel25, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 197, -1, -1));
        jPanel11.add(jTextField11_totalWeight, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 160, 125, -1));
        jPanel11.add(jTextField12_totalPrice, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 190, 125, -1));

        getContentPane().add(jPanel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(1040, 270, 310, 240));

        jLabel8.setText("查询条件");

        jComboBox1_selectCondition.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "商品编号", "商品名称", "制造商", "产地", "生产日期", "重量", "数量", "单价", "批号", "进库日期", "出库日期", "备注" }));
        jComboBox1_selectCondition.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1_selectConditionActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jComboBox1_selectCondition, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(22, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addComponent(jLabel8)
                .addGap(18, 18, 18)
                .addComponent(jComboBox1_selectCondition, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        查询条件.setText("查询条件");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "编号", "车牌号", "车主姓名", "身份证号", "手机号码", "进站口", "离站口", "本次消费", "卡内余额", "备注" }));

        javax.swing.GroupLayout jPanel8_car_conditionLayout = new javax.swing.GroupLayout(jPanel8_car_condition);
        jPanel8_car_condition.setLayout(jPanel8_car_conditionLayout);
        jPanel8_car_conditionLayout.setHorizontalGroup(
            jPanel8_car_conditionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8_car_conditionLayout.createSequentialGroup()
                .addGroup(jPanel8_car_conditionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(查询条件)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 39, Short.MAX_VALUE))
        );
        jPanel8_car_conditionLayout.setVerticalGroup(
            jPanel8_car_conditionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8_car_conditionLayout.createSequentialGroup()
                .addComponent(查询条件)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel8_car_condition, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 43, Short.MAX_VALUE))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel8_car_condition, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        getContentPane().add(jPanel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(1030, 50, 400, 80));

        jMenuBar1.setToolTipText("");

        jMenu1.setText("操作界面");
        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jRadioButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton1ActionPerformed
        // jPanel4.setVisible(true); 
        jPanel5.setVisible(false);
// TODO add your handling code here:
    }//GEN-LAST:event_jRadioButton1ActionPerformed

    private void jRadioButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton2ActionPerformed
        //jPanel4.setVisible(false); 
        jPanel5.setVisible(true); // TODO add your handling code here:
    }//GEN-LAST:event_jRadioButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        String ip = jComboBox2.getSelectedItem().toString();
        int port = Integer.parseInt(jTextField1.getText());

        MainHandler handler = new MainHandler();
        if (handler.dllInit("R2k.dll")) {
            if (handler.deviceInit(ip, 0, port)) {
                AntStruct struct = handler.GetAnt();
                for (int i = 0; i < 4; i++) {
                    System.out.println("天线" + (i + 1) + (struct.antEnable[i] == 1 ? "——已连接" : "——未连接") + "——工作时间:" + struct.dwellTime[i] + "ms——功率:" + struct.power[i].longValue() / 10 + "dBm");
                }
                jTextField4_replayConnect.setText("天线已连接！");
            }
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jCheckBox1_antNum1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1_antNum1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBox1_antNum1ActionPerformed

    private void jTextField2_labelCountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2_labelCountActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField2_labelCountActionPerformed

    private void jButton7_readOnceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7_readOnceActionPerformed

        MainHandler handler = new MainHandler();
        if (handler.dllInit("R2k.dll")) {
            if (handler.deviceInit("10.10.100.254", 0, 8899)) {
                try {
//                    System.out.println(handler.StopInv());
                    handler.InvOnce(this);   //回调函数
                    try {
                        Thread.sleep(2000);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(SugarSystemGUI.class.getName()).log(Level.SEVERE, null, ex);
                    }

                } catch (RFIDException ex) {
                    Logger.getLogger(SugarSystemGUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }

        String[] readDataString = readData.split(",");
        strLength = readDataString.length;

        HashSet<String> readDataSet = new HashSet<String>();
        for (int i = 0; i < readDataString.length; i++) {
            readDataSet.add(readDataString[i]);
        }

        Vector colNames = new Vector();
        colNames.add("商品编号");
        colNames.add("商品名称");
        colNames.add("制造商");
        colNames.add("产地");
        colNames.add("生产日期");
        colNames.add("重量");
        colNames.add("数量");
        colNames.add("单价");
        colNames.add("批号");
        colNames.add("进库日期");
        colNames.add("出库日期");
        colNames.add("备注");

//        {"id", "commodityId","commodityName", "manufacter", "place",
//            "productionDate", "weight", "quantity", "price", "batchNumber",
//            "dateOfEntry", "dateOfOut", "remarks"};
        String[] str = new String[readDataSet.size()];
        int m = 0;
        Iterator<String> iter = readDataSet.iterator();
//        for(int i=0;i<readDataSet.size();i++){
//             str[i]=readDataSet.
//        }
        ArrayList list = new ArrayList();
        while (iter.hasNext()) {
            str[m] = iter.next();
            m++;
        }
        System.out.println("str的长度为" + str.length + " " + str[1]);
        for (int i = 0; i < str.length; i++) {
            System.out.println("str为" + str[i]);
        }
        for (int i = 0; i < str.length; i++) {
            if (!str[i].equals("")) {
                if (str[i].substring(0, 2).equals("E2")) {
                    setTitle("制糖业管理系统");
                    if (str[i].substring(20, 24).equals("1678")) {
                        SugarDao sugarDao = new SugarDao();
                        Sugar sugar = new Sugar();
                        sugar = sugarDao.queryUniqueObject("1");
                        Vector readNoRepeatData = new Vector();
                        readNoRepeatData.add(sugar.getCommodityId());
                        readNoRepeatData.add(sugar.getCommodityName());
                        readNoRepeatData.add(sugar.getManufacter());
                        readNoRepeatData.add(sugar.getPlace());
                        readNoRepeatData.add(sugar.getProductionDate());
                        readNoRepeatData.add(sugar.getWeight());
                        readNoRepeatData.add(sugar.getQuantity());
                        readNoRepeatData.add(sugar.getPrice());
                        readNoRepeatData.add(sugar.getBatchNumber());
                        readNoRepeatData.add(sugar.getDateOfEntry());
                        readNoRepeatData.add(sugar.getDateOfOut());
                        readNoRepeatData.add(sugar.getRemarks());
                        result.add(readNoRepeatData);
                    }
                    if (str[i].substring(20, 24).equals("0F09")) {
                        SugarDao sugarDao = new SugarDao();
                        Sugar sugar = new Sugar();
                        sugar = sugarDao.queryUniqueObject("2");
                        Vector readNoRepeatData = new Vector();
                        readNoRepeatData.add(sugar.getCommodityId());
                        readNoRepeatData.add(sugar.getCommodityName());
                        readNoRepeatData.add(sugar.getManufacter());
                        readNoRepeatData.add(sugar.getPlace());
                        readNoRepeatData.add(sugar.getProductionDate());
                        readNoRepeatData.add(sugar.getWeight());
                        readNoRepeatData.add(sugar.getQuantity());
                        readNoRepeatData.add(sugar.getPrice());
                        readNoRepeatData.add(sugar.getBatchNumber());
                        readNoRepeatData.add(sugar.getDateOfEntry());
                        readNoRepeatData.add(sugar.getDateOfOut());
                        readNoRepeatData.add(sugar.getRemarks());
                        result.add(readNoRepeatData);
                    }
                    if (str[i].substring(20, 24).equals("4588")) {
                        SugarDao sugarDao = new SugarDao();
                        Sugar sugar = new Sugar();
                        sugar = sugarDao.queryUniqueObject("3");
                        Vector readNoRepeatData = new Vector();
                        readNoRepeatData.add(sugar.getCommodityId());
                        readNoRepeatData.add(sugar.getCommodityName());
                        readNoRepeatData.add(sugar.getManufacter());
                        readNoRepeatData.add(sugar.getPlace());
                        readNoRepeatData.add(sugar.getProductionDate());
                        readNoRepeatData.add(sugar.getWeight());
                        readNoRepeatData.add(sugar.getQuantity());
                        readNoRepeatData.add(sugar.getPrice());
                        readNoRepeatData.add(sugar.getBatchNumber());
                        readNoRepeatData.add(sugar.getDateOfEntry());
                        readNoRepeatData.add(sugar.getDateOfOut());
                        readNoRepeatData.add(sugar.getRemarks());
                        result.add(readNoRepeatData);
                    }
                    if (str[i].substring(20, 24).equals("3F5E")) {
                        SugarDao sugarDao = new SugarDao();
                        Sugar sugar = new Sugar();
                        sugar = sugarDao.queryUniqueObject("4");
                        Vector readNoRepeatData = new Vector();
                        readNoRepeatData.add(sugar.getCommodityId());
                        readNoRepeatData.add(sugar.getCommodityName());
                        readNoRepeatData.add(sugar.getManufacter());
                        readNoRepeatData.add(sugar.getPlace());
                        readNoRepeatData.add(sugar.getProductionDate());
                        readNoRepeatData.add(sugar.getWeight());
                        readNoRepeatData.add(sugar.getQuantity());
                        readNoRepeatData.add(sugar.getPrice());
                        readNoRepeatData.add(sugar.getBatchNumber());
                        readNoRepeatData.add(sugar.getDateOfEntry());
                        readNoRepeatData.add(sugar.getDateOfOut());
                        readNoRepeatData.add(sugar.getRemarks());
                        result.add(readNoRepeatData);
                    }
                    if (str[i].substring(20, 24).equals("3735")) {
                        SugarDao sugarDao = new SugarDao();
                        Sugar sugar = new Sugar();
                        sugar = sugarDao.queryUniqueObject("5");
                        Vector readNoRepeatData = new Vector();
                        readNoRepeatData.add(sugar.getCommodityId());
                        readNoRepeatData.add(sugar.getCommodityName());
                        readNoRepeatData.add(sugar.getManufacter());
                        readNoRepeatData.add(sugar.getPlace());
                        readNoRepeatData.add(sugar.getProductionDate());
                        readNoRepeatData.add(sugar.getWeight());
                        readNoRepeatData.add(sugar.getQuantity());
                        readNoRepeatData.add(sugar.getPrice());
                        readNoRepeatData.add(sugar.getBatchNumber());
                        readNoRepeatData.add(sugar.getDateOfEntry());
                        readNoRepeatData.add(sugar.getDateOfOut());
                        readNoRepeatData.add(sugar.getRemarks());
                        result.add(readNoRepeatData);
                    }
                    if (str[i].substring(20, 24).equals("6CB0")) {
                        SugarDao sugarDao = new SugarDao();
                        Sugar sugar = new Sugar();
                        sugar = sugarDao.queryUniqueObject("6");
                        Vector readNoRepeatData = new Vector();
                        readNoRepeatData.add(sugar.getCommodityId());
                        readNoRepeatData.add(sugar.getCommodityName());
                        readNoRepeatData.add(sugar.getManufacter());
                        readNoRepeatData.add(sugar.getPlace());
                        readNoRepeatData.add(sugar.getProductionDate());
                        readNoRepeatData.add(sugar.getWeight());
                        readNoRepeatData.add(sugar.getQuantity());
                        readNoRepeatData.add(sugar.getPrice());
                        readNoRepeatData.add(sugar.getBatchNumber());
                        readNoRepeatData.add(sugar.getDateOfEntry());
                        readNoRepeatData.add(sugar.getDateOfOut());
                        readNoRepeatData.add(sugar.getRemarks());
                        result.add(readNoRepeatData);
                    }
                    if (str[i].substring(20, 24).equals("619B")) {
                        SugarDao sugarDao = new SugarDao();
                        Sugar sugar = new Sugar();
                        sugar = sugarDao.queryUniqueObject("7");
                        Vector readNoRepeatData = new Vector();
                        readNoRepeatData.add(sugar.getCommodityId());
                        readNoRepeatData.add(sugar.getCommodityName());
                        readNoRepeatData.add(sugar.getManufacter());
                        readNoRepeatData.add(sugar.getPlace());
                        readNoRepeatData.add(sugar.getProductionDate());
                        readNoRepeatData.add(sugar.getWeight());
                        readNoRepeatData.add(sugar.getQuantity());
                        readNoRepeatData.add(sugar.getPrice());
                        readNoRepeatData.add(sugar.getBatchNumber());
                        readNoRepeatData.add(sugar.getDateOfEntry());
                        readNoRepeatData.add(sugar.getDateOfOut());
                        readNoRepeatData.add(sugar.getRemarks());
                        result.add(readNoRepeatData);
                    }
                    if (str[i].substring(20, 24).equals("63CB")) {
                        SugarDao sugarDao = new SugarDao();
                        Sugar sugar = new Sugar();
                        sugar = sugarDao.queryUniqueObject("8");
                        Vector readNoRepeatData = new Vector();
                        readNoRepeatData.add(sugar.getCommodityId());
                        readNoRepeatData.add(sugar.getCommodityName());
                        readNoRepeatData.add(sugar.getManufacter());
                        readNoRepeatData.add(sugar.getPlace());
                        readNoRepeatData.add(sugar.getProductionDate());
                        readNoRepeatData.add(sugar.getWeight());
                        readNoRepeatData.add(sugar.getQuantity());
                        readNoRepeatData.add(sugar.getPrice());
                        readNoRepeatData.add(sugar.getBatchNumber());
                        readNoRepeatData.add(sugar.getDateOfEntry());
                        readNoRepeatData.add(sugar.getDateOfOut());
                        readNoRepeatData.add(sugar.getRemarks());
                        result.add(readNoRepeatData);
                    }
                    if (str[i].substring(20, 24).equals("14E2")) {
                        SugarDao sugarDao = new SugarDao();
                        Sugar sugar = new Sugar();
                        sugar = sugarDao.queryUniqueObject("9");
                        Vector readNoRepeatData = new Vector();
                        readNoRepeatData.add(sugar.getCommodityId());
                        readNoRepeatData.add(sugar.getCommodityName());
                        readNoRepeatData.add(sugar.getManufacter());
                        readNoRepeatData.add(sugar.getPlace());
                        readNoRepeatData.add(sugar.getProductionDate());
                        readNoRepeatData.add(sugar.getWeight());
                        readNoRepeatData.add(sugar.getQuantity());
                        readNoRepeatData.add(sugar.getPrice());
                        readNoRepeatData.add(sugar.getBatchNumber());
                        readNoRepeatData.add(sugar.getDateOfEntry());
                        readNoRepeatData.add(sugar.getDateOfOut());
                        readNoRepeatData.add(sugar.getRemarks());
                        result.add(readNoRepeatData);
                    }
                    if (str[i].substring(20, 24).equals("1818")) {
                        SugarDao sugarDao = new SugarDao();
                        Sugar sugar = new Sugar();
                        sugar = sugarDao.queryUniqueObject("10");
                        Vector readNoRepeatData = new Vector();
                        readNoRepeatData.add(sugar.getCommodityId());
                        readNoRepeatData.add(sugar.getCommodityName());
                        readNoRepeatData.add(sugar.getManufacter());
                        readNoRepeatData.add(sugar.getPlace());
                        readNoRepeatData.add(sugar.getProductionDate());
                        readNoRepeatData.add(sugar.getWeight());
                        readNoRepeatData.add(sugar.getQuantity());
                        readNoRepeatData.add(sugar.getPrice());
                        readNoRepeatData.add(sugar.getBatchNumber());
                        readNoRepeatData.add(sugar.getDateOfEntry());
                        readNoRepeatData.add(sugar.getDateOfOut());
                        readNoRepeatData.add(sugar.getRemarks());
                        result.add(readNoRepeatData);
                    }
                    if (str[i].substring(20, 24).equals("5035")) {
                        SugarDao sugarDao = new SugarDao();
                        Sugar sugar = new Sugar();
                        sugar = sugarDao.queryUniqueObject("11");
                        Vector readNoRepeatData = new Vector();
                        readNoRepeatData.add(sugar.getCommodityId());
                        readNoRepeatData.add(sugar.getCommodityName());
                        readNoRepeatData.add(sugar.getManufacter());
                        readNoRepeatData.add(sugar.getPlace());
                        readNoRepeatData.add(sugar.getProductionDate());
                        readNoRepeatData.add(sugar.getWeight());
                        readNoRepeatData.add(sugar.getQuantity());
                        readNoRepeatData.add(sugar.getPrice());
                        readNoRepeatData.add(sugar.getBatchNumber());
                        readNoRepeatData.add(sugar.getDateOfEntry());
                        readNoRepeatData.add(sugar.getDateOfOut());
                        readNoRepeatData.add(sugar.getRemarks());
                        result.add(readNoRepeatData);
                    }
                    if (str[i].substring(20, 24).equals("2089")) {
                        SugarDao sugarDao = new SugarDao();
                        Sugar sugar = new Sugar();
                        sugar = sugarDao.queryUniqueObject("12");
                        Vector readNoRepeatData = new Vector();
                        readNoRepeatData.add(sugar.getCommodityId());
                        readNoRepeatData.add(sugar.getCommodityName());
                        readNoRepeatData.add(sugar.getManufacter());
                        readNoRepeatData.add(sugar.getPlace());
                        readNoRepeatData.add(sugar.getProductionDate());
                        readNoRepeatData.add(sugar.getWeight());
                        readNoRepeatData.add(sugar.getQuantity());
                        readNoRepeatData.add(sugar.getPrice());
                        readNoRepeatData.add(sugar.getBatchNumber());
                        readNoRepeatData.add(sugar.getDateOfEntry());
                        readNoRepeatData.add(sugar.getDateOfOut());
                        readNoRepeatData.add(sugar.getRemarks());
                        result.add(readNoRepeatData);
                    }
                    if (str[i].substring(20, 24).equals("043B")) {
                        SugarDao sugarDao = new SugarDao();
                        Sugar sugar = new Sugar();
                        sugar = sugarDao.queryUniqueObject("13");
                        Vector readNoRepeatData = new Vector();
                        readNoRepeatData.add(sugar.getCommodityId());
                        readNoRepeatData.add(sugar.getCommodityName());
                        readNoRepeatData.add(sugar.getManufacter());
                        readNoRepeatData.add(sugar.getPlace());
                        readNoRepeatData.add(sugar.getProductionDate());
                        readNoRepeatData.add(sugar.getWeight());
                        readNoRepeatData.add(sugar.getQuantity());
                        readNoRepeatData.add(sugar.getPrice());
                        readNoRepeatData.add(sugar.getBatchNumber());
                        readNoRepeatData.add(sugar.getDateOfEntry());
                        readNoRepeatData.add(sugar.getDateOfOut());
                        readNoRepeatData.add(sugar.getRemarks());
                        result.add(readNoRepeatData);
                    }
                    if (str[i].substring(20, 24).equals("1369")) {
                        SugarDao sugarDao = new SugarDao();
                        Sugar sugar = new Sugar();
                        sugar = sugarDao.queryUniqueObject("14");
                        Vector readNoRepeatData = new Vector();
                        readNoRepeatData.add(sugar.getCommodityId());
                        readNoRepeatData.add(sugar.getCommodityName());
                        readNoRepeatData.add(sugar.getManufacter());
                        readNoRepeatData.add(sugar.getPlace());
                        readNoRepeatData.add(sugar.getProductionDate());
                        readNoRepeatData.add(sugar.getWeight());
                        readNoRepeatData.add(sugar.getQuantity());
                        readNoRepeatData.add(sugar.getPrice());
                        readNoRepeatData.add(sugar.getBatchNumber());
                        readNoRepeatData.add(sugar.getDateOfEntry());
                        readNoRepeatData.add(sugar.getDateOfOut());
                        readNoRepeatData.add(sugar.getRemarks());
                        result.add(readNoRepeatData);
                    }
                    if (str[i].substring(20, 24).equals("0F02")) {
                        SugarDao sugarDao = new SugarDao();
                        Sugar sugar = new Sugar();
                        sugar = sugarDao.queryUniqueObject("15");
                        Vector readNoRepeatData = new Vector();
                        readNoRepeatData.add(sugar.getCommodityId());
                        readNoRepeatData.add(sugar.getCommodityName());
                        readNoRepeatData.add(sugar.getManufacter());
                        readNoRepeatData.add(sugar.getPlace());
                        readNoRepeatData.add(sugar.getProductionDate());
                        readNoRepeatData.add(sugar.getWeight());
                        readNoRepeatData.add(sugar.getQuantity());
                        readNoRepeatData.add(sugar.getPrice());
                        readNoRepeatData.add(sugar.getBatchNumber());
                        readNoRepeatData.add(sugar.getDateOfEntry());
                        readNoRepeatData.add(sugar.getDateOfOut());
                        readNoRepeatData.add(sugar.getRemarks());
                        result.add(readNoRepeatData);
                    }
                    if (str[i].substring(20, 24).equals("0750")) {
                        SugarDao sugarDao = new SugarDao();
                        Sugar sugar = new Sugar();
                        sugar = sugarDao.queryUniqueObject("16");
                        Vector readNoRepeatData = new Vector();
                        readNoRepeatData.add(sugar.getCommodityId());
                        readNoRepeatData.add(sugar.getCommodityName());
                        readNoRepeatData.add(sugar.getManufacter());
                        readNoRepeatData.add(sugar.getPlace());
                        readNoRepeatData.add(sugar.getProductionDate());
                        readNoRepeatData.add(sugar.getWeight());
                        readNoRepeatData.add(sugar.getQuantity());
                        readNoRepeatData.add(sugar.getPrice());
                        readNoRepeatData.add(sugar.getBatchNumber());
                        readNoRepeatData.add(sugar.getDateOfEntry());
                        readNoRepeatData.add(sugar.getDateOfOut());
                        readNoRepeatData.add(sugar.getRemarks());
                        result.add(readNoRepeatData);
                    }
                    if (str[i].substring(20, 24).equals("2251")) {
                        SugarDao sugarDao = new SugarDao();
                        Sugar sugar = new Sugar();
                        sugar = sugarDao.queryUniqueObject("17");
                        Vector readNoRepeatData = new Vector();
                        readNoRepeatData.add(sugar.getCommodityId());
                        readNoRepeatData.add(sugar.getCommodityName());
                        readNoRepeatData.add(sugar.getManufacter());
                        readNoRepeatData.add(sugar.getPlace());
                        readNoRepeatData.add(sugar.getProductionDate());
                        readNoRepeatData.add(sugar.getWeight());
                        readNoRepeatData.add(sugar.getQuantity());
                        readNoRepeatData.add(sugar.getPrice());
                        readNoRepeatData.add(sugar.getBatchNumber());
                        readNoRepeatData.add(sugar.getDateOfEntry());
                        readNoRepeatData.add(sugar.getDateOfOut());
                        readNoRepeatData.add(sugar.getRemarks());
                        result.add(readNoRepeatData);
                    }
                    if (str[i].substring(20, 24).equals("6A70")) {
                        SugarDao sugarDao = new SugarDao();
                        Sugar sugar = new Sugar();
                        sugar = sugarDao.queryUniqueObject("18");
                        Vector readNoRepeatData = new Vector();
                        readNoRepeatData.add(sugar.getCommodityId());
                        readNoRepeatData.add(sugar.getCommodityName());
                        readNoRepeatData.add(sugar.getManufacter());
                        readNoRepeatData.add(sugar.getPlace());
                        readNoRepeatData.add(sugar.getProductionDate());
                        readNoRepeatData.add(sugar.getWeight());
                        readNoRepeatData.add(sugar.getQuantity());
                        readNoRepeatData.add(sugar.getPrice());
                        readNoRepeatData.add(sugar.getBatchNumber());
                        readNoRepeatData.add(sugar.getDateOfEntry());
                        readNoRepeatData.add(sugar.getDateOfOut());
                        readNoRepeatData.add(sugar.getRemarks());
                        result.add(readNoRepeatData);
                    }
                    if (str[i].substring(20, 24).equals("0348")) {
                        SugarDao sugarDao = new SugarDao();
                        Sugar sugar = new Sugar();
                        sugar = sugarDao.queryUniqueObject("19");
                        Vector readNoRepeatData = new Vector();
                        readNoRepeatData.add(sugar.getCommodityId());
                        readNoRepeatData.add(sugar.getCommodityName());
                        readNoRepeatData.add(sugar.getManufacter());
                        readNoRepeatData.add(sugar.getPlace());
                        readNoRepeatData.add(sugar.getProductionDate());
                        readNoRepeatData.add(sugar.getWeight());
                        readNoRepeatData.add(sugar.getQuantity());
                        readNoRepeatData.add(sugar.getPrice());
                        readNoRepeatData.add(sugar.getBatchNumber());
                        readNoRepeatData.add(sugar.getDateOfEntry());
                        readNoRepeatData.add(sugar.getDateOfOut());
                        readNoRepeatData.add(sugar.getRemarks());
                        result.add(readNoRepeatData);
                    }
                    if (str[i].substring(20, 24).equals("87B8")) {
                        SugarDao sugarDao = new SugarDao();
                        Sugar sugar = new Sugar();
                        sugar = sugarDao.queryUniqueObject("20");
                        Vector readNoRepeatData = new Vector();
                        readNoRepeatData.add(sugar.getCommodityId());
                        readNoRepeatData.add(sugar.getCommodityName());
                        readNoRepeatData.add(sugar.getManufacter());
                        readNoRepeatData.add(sugar.getPlace());
                        readNoRepeatData.add(sugar.getProductionDate());
                        readNoRepeatData.add(sugar.getWeight());
                        readNoRepeatData.add(sugar.getQuantity());
                        readNoRepeatData.add(sugar.getPrice());
                        readNoRepeatData.add(sugar.getBatchNumber());
                        readNoRepeatData.add(sugar.getDateOfEntry());
                        readNoRepeatData.add(sugar.getDateOfOut());
                        readNoRepeatData.add(sugar.getRemarks());
                        result.add(readNoRepeatData);
                    }
                    if (str[i].substring(20, 24).equals("7C74")) {
                        SugarDao sugarDao = new SugarDao();
                        Sugar sugar = new Sugar();
                        sugar = sugarDao.queryUniqueObject("21");
                        Vector readNoRepeatData = new Vector();
                        readNoRepeatData.add(sugar.getCommodityId());
                        readNoRepeatData.add(sugar.getCommodityName());
                        readNoRepeatData.add(sugar.getManufacter());
                        readNoRepeatData.add(sugar.getPlace());
                        readNoRepeatData.add(sugar.getProductionDate());
                        readNoRepeatData.add(sugar.getWeight());
                        readNoRepeatData.add(sugar.getQuantity());
                        readNoRepeatData.add(sugar.getPrice());
                        readNoRepeatData.add(sugar.getBatchNumber());
                        readNoRepeatData.add(sugar.getDateOfEntry());
                        readNoRepeatData.add(sugar.getDateOfOut());
                        readNoRepeatData.add(sugar.getRemarks());
                        result.add(readNoRepeatData);
                    }
                    if (str[i].substring(20, 24).equals("063F")) {
                        SugarDao sugarDao = new SugarDao();
                        Sugar sugar = new Sugar();
                        sugar = sugarDao.queryUniqueObject("22");
                        Vector readNoRepeatData = new Vector();
                        readNoRepeatData.add(sugar.getCommodityId());
                        readNoRepeatData.add(sugar.getCommodityName());
                        readNoRepeatData.add(sugar.getManufacter());
                        readNoRepeatData.add(sugar.getPlace());
                        readNoRepeatData.add(sugar.getProductionDate());
                        readNoRepeatData.add(sugar.getWeight());
                        readNoRepeatData.add(sugar.getQuantity());
                        readNoRepeatData.add(sugar.getPrice());
                        readNoRepeatData.add(sugar.getBatchNumber());
                        readNoRepeatData.add(sugar.getDateOfEntry());
                        readNoRepeatData.add(sugar.getDateOfOut());
                        readNoRepeatData.add(sugar.getRemarks());
                        result.add(readNoRepeatData);
                    }
                    if (str[i].substring(20, 24).equals("5B07")) {
                        SugarDao sugarDao = new SugarDao();
                        Sugar sugar = new Sugar();
                        sugar = sugarDao.queryUniqueObject("23");
                        Vector readNoRepeatData = new Vector();
                        readNoRepeatData.add(sugar.getCommodityId());
                        readNoRepeatData.add(sugar.getCommodityName());
                        readNoRepeatData.add(sugar.getManufacter());
                        readNoRepeatData.add(sugar.getPlace());
                        readNoRepeatData.add(sugar.getProductionDate());
                        readNoRepeatData.add(sugar.getWeight());
                        readNoRepeatData.add(sugar.getQuantity());
                        readNoRepeatData.add(sugar.getPrice());
                        readNoRepeatData.add(sugar.getBatchNumber());
                        readNoRepeatData.add(sugar.getDateOfEntry());
                        readNoRepeatData.add(sugar.getDateOfOut());
                        readNoRepeatData.add(sugar.getRemarks());
                        result.add(readNoRepeatData);
                    }
                    if (str[i].substring(20, 24).equals("4163")) {
                        SugarDao sugarDao = new SugarDao();
                        Sugar sugar = new Sugar();
                        sugar = sugarDao.queryUniqueObject("24");
                        Vector readNoRepeatData = new Vector();
                        readNoRepeatData.add(sugar.getCommodityId());
                        readNoRepeatData.add(sugar.getCommodityName());
                        readNoRepeatData.add(sugar.getManufacter());
                        readNoRepeatData.add(sugar.getPlace());
                        readNoRepeatData.add(sugar.getProductionDate());
                        readNoRepeatData.add(sugar.getWeight());
                        readNoRepeatData.add(sugar.getQuantity());
                        readNoRepeatData.add(sugar.getPrice());
                        readNoRepeatData.add(sugar.getBatchNumber());
                        readNoRepeatData.add(sugar.getDateOfEntry());
                        readNoRepeatData.add(sugar.getDateOfOut());
                        readNoRepeatData.add(sugar.getRemarks());
                        result.add(readNoRepeatData);
                    }
                    if (str[i].substring(20, 24).equals("0DA1")) {
                        SugarDao sugarDao = new SugarDao();
                        Sugar sugar = new Sugar();
                        sugar = sugarDao.queryUniqueObject("25");
                        Vector readNoRepeatData = new Vector();
                        readNoRepeatData.add(sugar.getCommodityId());
                        readNoRepeatData.add(sugar.getCommodityName());
                        readNoRepeatData.add(sugar.getManufacter());
                        readNoRepeatData.add(sugar.getPlace());
                        readNoRepeatData.add(sugar.getProductionDate());
                        readNoRepeatData.add(sugar.getWeight());
                        readNoRepeatData.add(sugar.getQuantity());
                        readNoRepeatData.add(sugar.getPrice());
                        readNoRepeatData.add(sugar.getBatchNumber());
                        readNoRepeatData.add(sugar.getDateOfEntry());
                        readNoRepeatData.add(sugar.getDateOfOut());
                        readNoRepeatData.add(sugar.getRemarks());
                        result.add(readNoRepeatData);
                    }
                    if (str[i].substring(20, 24).equals("2F4A")) {
                        SugarDao sugarDao = new SugarDao();
                        Sugar sugar = new Sugar();
                        sugar = sugarDao.queryUniqueObject("26");
                        Vector readNoRepeatData = new Vector();
                        readNoRepeatData.add(sugar.getCommodityId());
                        readNoRepeatData.add(sugar.getCommodityName());
                        readNoRepeatData.add(sugar.getManufacter());
                        readNoRepeatData.add(sugar.getPlace());
                        readNoRepeatData.add(sugar.getProductionDate());
                        readNoRepeatData.add(sugar.getWeight());
                        readNoRepeatData.add(sugar.getQuantity());
                        readNoRepeatData.add(sugar.getPrice());
                        readNoRepeatData.add(sugar.getBatchNumber());
                        readNoRepeatData.add(sugar.getDateOfEntry());
                        readNoRepeatData.add(sugar.getDateOfOut());
                        readNoRepeatData.add(sugar.getRemarks());
                        result.add(readNoRepeatData);
                    }
                    if (str[i].substring(20, 24).equals("7C78")) {
                        SugarDao sugarDao = new SugarDao();
                        Sugar sugar = new Sugar();
                        sugar = sugarDao.queryUniqueObject("27");
                        Vector readNoRepeatData = new Vector();
                        readNoRepeatData.add(sugar.getCommodityId());
                        readNoRepeatData.add(sugar.getCommodityName());
                        readNoRepeatData.add(sugar.getManufacter());
                        readNoRepeatData.add(sugar.getPlace());
                        readNoRepeatData.add(sugar.getProductionDate());
                        readNoRepeatData.add(sugar.getWeight());
                        readNoRepeatData.add(sugar.getQuantity());
                        readNoRepeatData.add(sugar.getPrice());
                        readNoRepeatData.add(sugar.getBatchNumber());
                        readNoRepeatData.add(sugar.getDateOfEntry());
                        readNoRepeatData.add(sugar.getDateOfOut());
                        readNoRepeatData.add(sugar.getRemarks());
                        result.add(readNoRepeatData);
                    }
                    if (str[i].substring(20, 24).equals("58DE")) {
                        SugarDao sugarDao = new SugarDao();
                        Sugar sugar = new Sugar();
                        sugar = sugarDao.queryUniqueObject("28");
                        Vector readNoRepeatData = new Vector();
                        readNoRepeatData.add(sugar.getCommodityId());
                        readNoRepeatData.add(sugar.getCommodityName());
                        readNoRepeatData.add(sugar.getManufacter());
                        readNoRepeatData.add(sugar.getPlace());
                        readNoRepeatData.add(sugar.getProductionDate());
                        readNoRepeatData.add(sugar.getWeight());
                        readNoRepeatData.add(sugar.getQuantity());
                        readNoRepeatData.add(sugar.getPrice());
                        readNoRepeatData.add(sugar.getBatchNumber());
                        readNoRepeatData.add(sugar.getDateOfEntry());
                        readNoRepeatData.add(sugar.getDateOfOut());
                        readNoRepeatData.add(sugar.getRemarks());
                        result.add(readNoRepeatData);
                    }
                    if (str[i].substring(20, 24).equals("14EA")) {
                        SugarDao sugarDao = new SugarDao();
                        Sugar sugar = new Sugar();
                        sugar = sugarDao.queryUniqueObject("29");
                        Vector readNoRepeatData = new Vector();
                        readNoRepeatData.add(sugar.getCommodityId());
                        readNoRepeatData.add(sugar.getCommodityName());
                        readNoRepeatData.add(sugar.getManufacter());
                        readNoRepeatData.add(sugar.getPlace());
                        readNoRepeatData.add(sugar.getProductionDate());
                        readNoRepeatData.add(sugar.getWeight());
                        readNoRepeatData.add(sugar.getQuantity());
                        readNoRepeatData.add(sugar.getPrice());
                        readNoRepeatData.add(sugar.getBatchNumber());
                        readNoRepeatData.add(sugar.getDateOfEntry());
                        readNoRepeatData.add(sugar.getDateOfOut());
                        readNoRepeatData.add(sugar.getRemarks());
                        result.add(readNoRepeatData);
                    }
                    if (str[i].substring(20, 24).equals("034C")) {
                        SugarDao sugarDao = new SugarDao();
                        Sugar sugar = new Sugar();
                        sugar = sugarDao.queryUniqueObject("30");
                        Vector readNoRepeatData = new Vector();
                        readNoRepeatData.add(sugar.getCommodityId());
                        readNoRepeatData.add(sugar.getCommodityName());
                        readNoRepeatData.add(sugar.getManufacter());
                        readNoRepeatData.add(sugar.getPlace());
                        readNoRepeatData.add(sugar.getProductionDate());
                        readNoRepeatData.add(sugar.getWeight());
                        readNoRepeatData.add(sugar.getQuantity());
                        readNoRepeatData.add(sugar.getPrice());
                        readNoRepeatData.add(sugar.getBatchNumber());
                        readNoRepeatData.add(sugar.getDateOfEntry());
                        readNoRepeatData.add(sugar.getDateOfOut());
                        readNoRepeatData.add(sugar.getRemarks());
                        result.add(readNoRepeatData);
                    }
                    if (str[i].substring(20, 24).equals("1B66")) {
                        SugarDao sugarDao = new SugarDao();
                        Sugar sugar = new Sugar();
                        sugar = sugarDao.queryUniqueObject("31");
                        Vector readNoRepeatData = new Vector();
                        readNoRepeatData.add(sugar.getCommodityId());
                        readNoRepeatData.add(sugar.getCommodityName());
                        readNoRepeatData.add(sugar.getManufacter());
                        readNoRepeatData.add(sugar.getPlace());
                        readNoRepeatData.add(sugar.getProductionDate());
                        readNoRepeatData.add(sugar.getWeight());
                        readNoRepeatData.add(sugar.getQuantity());
                        readNoRepeatData.add(sugar.getPrice());
                        readNoRepeatData.add(sugar.getBatchNumber());
                        readNoRepeatData.add(sugar.getDateOfEntry());
                        readNoRepeatData.add(sugar.getDateOfOut());
                        readNoRepeatData.add(sugar.getRemarks());
                        result.add(readNoRepeatData);
                    }
                    if (str[i].substring(20, 24).equals("75B8")) {
                        SugarDao sugarDao = new SugarDao();
                        Sugar sugar = new Sugar();
                        sugar = sugarDao.queryUniqueObject("32");
                        Vector readNoRepeatData = new Vector();
                        readNoRepeatData.add(sugar.getCommodityId());
                        readNoRepeatData.add(sugar.getCommodityName());
                        readNoRepeatData.add(sugar.getManufacter());
                        readNoRepeatData.add(sugar.getPlace());
                        readNoRepeatData.add(sugar.getProductionDate());
                        readNoRepeatData.add(sugar.getWeight());
                        readNoRepeatData.add(sugar.getQuantity());
                        readNoRepeatData.add(sugar.getPrice());
                        readNoRepeatData.add(sugar.getBatchNumber());
                        readNoRepeatData.add(sugar.getDateOfEntry());
                        readNoRepeatData.add(sugar.getDateOfOut());
                        readNoRepeatData.add(sugar.getRemarks());
                        result.add(readNoRepeatData);
                    }
                    if (str[i].substring(20, 24).equals("47A4")) {
                        SugarDao sugarDao = new SugarDao();
                        Sugar sugar = new Sugar();
                        sugar = sugarDao.queryUniqueObject("33");
                        Vector readNoRepeatData = new Vector();
                        readNoRepeatData.add(sugar.getCommodityId());
                        readNoRepeatData.add(sugar.getCommodityName());
                        readNoRepeatData.add(sugar.getManufacter());
                        readNoRepeatData.add(sugar.getPlace());
                        readNoRepeatData.add(sugar.getProductionDate());
                        readNoRepeatData.add(sugar.getWeight());
                        readNoRepeatData.add(sugar.getQuantity());
                        readNoRepeatData.add(sugar.getPrice());
                        readNoRepeatData.add(sugar.getBatchNumber());
                        readNoRepeatData.add(sugar.getDateOfEntry());
                        readNoRepeatData.add(sugar.getDateOfOut());
                        readNoRepeatData.add(sugar.getRemarks());
                        result.add(readNoRepeatData);
                    }
                    if (str[i].substring(20, 24).equals("2994")) {
                        SugarDao sugarDao = new SugarDao();
                        Sugar sugar = new Sugar();
                        sugar = sugarDao.queryUniqueObject("34");
                        Vector readNoRepeatData = new Vector();
                        readNoRepeatData.add(sugar.getCommodityId());
                        readNoRepeatData.add(sugar.getCommodityName());
                        readNoRepeatData.add(sugar.getManufacter());
                        readNoRepeatData.add(sugar.getPlace());
                        readNoRepeatData.add(sugar.getProductionDate());
                        readNoRepeatData.add(sugar.getWeight());
                        readNoRepeatData.add(sugar.getQuantity());
                        readNoRepeatData.add(sugar.getPrice());
                        readNoRepeatData.add(sugar.getBatchNumber());
                        readNoRepeatData.add(sugar.getDateOfEntry());
                        readNoRepeatData.add(sugar.getDateOfOut());
                        readNoRepeatData.add(sugar.getRemarks());
                        result.add(readNoRepeatData);
                    }
                    if (str[i].substring(20, 24).equals("89F4")) {
                        SugarDao sugarDao = new SugarDao();
                        Sugar sugar = new Sugar();
                        sugar = sugarDao.queryUniqueObject("35");
                        Vector readNoRepeatData = new Vector();
                        readNoRepeatData.add(sugar.getCommodityId());
                        readNoRepeatData.add(sugar.getCommodityName());
                        readNoRepeatData.add(sugar.getManufacter());
                        readNoRepeatData.add(sugar.getPlace());
                        readNoRepeatData.add(sugar.getProductionDate());
                        readNoRepeatData.add(sugar.getWeight());
                        readNoRepeatData.add(sugar.getQuantity());
                        readNoRepeatData.add(sugar.getPrice());
                        readNoRepeatData.add(sugar.getBatchNumber());
                        readNoRepeatData.add(sugar.getDateOfEntry());
                        readNoRepeatData.add(sugar.getDateOfOut());
                        readNoRepeatData.add(sugar.getRemarks());
                        result.add(readNoRepeatData);
                    }
                    if (str[i].substring(20, 24).equals("2B7A")) {
                        SugarDao sugarDao = new SugarDao();
                        Sugar sugar = new Sugar();
                        sugar = sugarDao.queryUniqueObject("36");
                        Vector readNoRepeatData = new Vector();
                        readNoRepeatData.add(sugar.getCommodityId());
                        readNoRepeatData.add(sugar.getCommodityName());
                        readNoRepeatData.add(sugar.getManufacter());
                        readNoRepeatData.add(sugar.getPlace());
                        readNoRepeatData.add(sugar.getProductionDate());
                        readNoRepeatData.add(sugar.getWeight());
                        readNoRepeatData.add(sugar.getQuantity());
                        readNoRepeatData.add(sugar.getPrice());
                        readNoRepeatData.add(sugar.getBatchNumber());
                        readNoRepeatData.add(sugar.getDateOfEntry());
                        readNoRepeatData.add(sugar.getDateOfOut());
                        readNoRepeatData.add(sugar.getRemarks());
                        result.add(readNoRepeatData);
                    }
                    if (str[i].substring(20, 24).equals("524E")) {
                        SugarDao sugarDao = new SugarDao();
                        Sugar sugar = new Sugar();
                        sugar = sugarDao.queryUniqueObject("37");
                        Vector readNoRepeatData = new Vector();
                        readNoRepeatData.add(sugar.getCommodityId());
                        readNoRepeatData.add(sugar.getCommodityName());
                        readNoRepeatData.add(sugar.getManufacter());
                        readNoRepeatData.add(sugar.getPlace());
                        readNoRepeatData.add(sugar.getProductionDate());
                        readNoRepeatData.add(sugar.getWeight());
                        readNoRepeatData.add(sugar.getQuantity());
                        readNoRepeatData.add(sugar.getPrice());
                        readNoRepeatData.add(sugar.getBatchNumber());
                        readNoRepeatData.add(sugar.getDateOfEntry());
                        readNoRepeatData.add(sugar.getDateOfOut());
                        readNoRepeatData.add(sugar.getRemarks());
                        result.add(readNoRepeatData);
                    }
                    if (str[i].substring(20, 24).equals("224A")) {
                        SugarDao sugarDao = new SugarDao();
                        Sugar sugar = new Sugar();
                        sugar = sugarDao.queryUniqueObject("38");
                        Vector readNoRepeatData = new Vector();
                        readNoRepeatData.add(sugar.getCommodityId());
                        readNoRepeatData.add(sugar.getCommodityName());
                        readNoRepeatData.add(sugar.getManufacter());
                        readNoRepeatData.add(sugar.getPlace());
                        readNoRepeatData.add(sugar.getProductionDate());
                        readNoRepeatData.add(sugar.getWeight());
                        readNoRepeatData.add(sugar.getQuantity());
                        readNoRepeatData.add(sugar.getPrice());
                        readNoRepeatData.add(sugar.getBatchNumber());
                        readNoRepeatData.add(sugar.getDateOfEntry());
                        readNoRepeatData.add(sugar.getDateOfOut());
                        readNoRepeatData.add(sugar.getRemarks());
                        result.add(readNoRepeatData);
                    }
                    if (str[i].substring(20, 24).equals("1D0C")) {
                        SugarDao sugarDao = new SugarDao();
                        Sugar sugar = new Sugar();
                        sugar = sugarDao.queryUniqueObject("39");
                        Vector readNoRepeatData = new Vector();
                        readNoRepeatData.add(sugar.getCommodityId());
                        readNoRepeatData.add(sugar.getCommodityName());
                        readNoRepeatData.add(sugar.getManufacter());
                        readNoRepeatData.add(sugar.getPlace());
                        readNoRepeatData.add(sugar.getProductionDate());
                        readNoRepeatData.add(sugar.getWeight());
                        readNoRepeatData.add(sugar.getQuantity());
                        readNoRepeatData.add(sugar.getPrice());
                        readNoRepeatData.add(sugar.getBatchNumber());
                        readNoRepeatData.add(sugar.getDateOfEntry());
                        readNoRepeatData.add(sugar.getDateOfOut());
                        readNoRepeatData.add(sugar.getRemarks());
                        result.add(readNoRepeatData);
                    }
                    if (str[i].substring(20, 24).equals("0C4F")) {
                        SugarDao sugarDao = new SugarDao();
                        Sugar sugar = new Sugar();
                        sugar = sugarDao.queryUniqueObject("40");
                        Vector readNoRepeatData = new Vector();
                        readNoRepeatData.add(sugar.getCommodityId());
                        readNoRepeatData.add(sugar.getCommodityName());
                        readNoRepeatData.add(sugar.getManufacter());
                        readNoRepeatData.add(sugar.getPlace());
                        readNoRepeatData.add(sugar.getProductionDate());
                        readNoRepeatData.add(sugar.getWeight());
                        readNoRepeatData.add(sugar.getQuantity());
                        readNoRepeatData.add(sugar.getPrice());
                        readNoRepeatData.add(sugar.getBatchNumber());
                        readNoRepeatData.add(sugar.getDateOfEntry());
                        readNoRepeatData.add(sugar.getDateOfOut());
                        readNoRepeatData.add(sugar.getRemarks());
                        result.add(readNoRepeatData);
                    }
                    if (str[i].substring(20, 24).equals("027F")) {
                        SugarDao sugarDao = new SugarDao();
                        Sugar sugar = new Sugar();
                        sugar = sugarDao.queryUniqueObject("41");
                        Vector readNoRepeatData = new Vector();
                        readNoRepeatData.add(sugar.getCommodityId());
                        readNoRepeatData.add(sugar.getCommodityName());
                        readNoRepeatData.add(sugar.getManufacter());
                        readNoRepeatData.add(sugar.getPlace());
                        readNoRepeatData.add(sugar.getProductionDate());
                        readNoRepeatData.add(sugar.getWeight());
                        readNoRepeatData.add(sugar.getQuantity());
                        readNoRepeatData.add(sugar.getPrice());
                        readNoRepeatData.add(sugar.getBatchNumber());
                        readNoRepeatData.add(sugar.getDateOfEntry());
                        readNoRepeatData.add(sugar.getDateOfOut());
                        readNoRepeatData.add(sugar.getRemarks());
                        result.add(readNoRepeatData);
                    }
                    if (str[i].substring(20, 24).equals("09AC")) {
                        SugarDao sugarDao = new SugarDao();
                        Sugar sugar = new Sugar();
                        sugar = sugarDao.queryUniqueObject("42");
                        Vector readNoRepeatData = new Vector();
                        readNoRepeatData.add(sugar.getCommodityId());
                        readNoRepeatData.add(sugar.getCommodityName());
                        readNoRepeatData.add(sugar.getManufacter());
                        readNoRepeatData.add(sugar.getPlace());
                        readNoRepeatData.add(sugar.getProductionDate());
                        readNoRepeatData.add(sugar.getWeight());
                        readNoRepeatData.add(sugar.getQuantity());
                        readNoRepeatData.add(sugar.getPrice());
                        readNoRepeatData.add(sugar.getBatchNumber());
                        readNoRepeatData.add(sugar.getDateOfEntry());
                        readNoRepeatData.add(sugar.getDateOfOut());
                        readNoRepeatData.add(sugar.getRemarks());
                        result.add(readNoRepeatData);
                    }
                    if (str[i].substring(20, 24).equals("087F")) {
                        SugarDao sugarDao = new SugarDao();
                        Sugar sugar = new Sugar();
                        sugar = sugarDao.queryUniqueObject("43");
                        Vector readNoRepeatData = new Vector();
                        readNoRepeatData.add(sugar.getCommodityId());
                        readNoRepeatData.add(sugar.getCommodityName());
                        readNoRepeatData.add(sugar.getManufacter());
                        readNoRepeatData.add(sugar.getPlace());
                        readNoRepeatData.add(sugar.getProductionDate());
                        readNoRepeatData.add(sugar.getWeight());
                        readNoRepeatData.add(sugar.getQuantity());
                        readNoRepeatData.add(sugar.getPrice());
                        readNoRepeatData.add(sugar.getBatchNumber());
                        readNoRepeatData.add(sugar.getDateOfEntry());
                        readNoRepeatData.add(sugar.getDateOfOut());
                        readNoRepeatData.add(sugar.getRemarks());
                        result.add(readNoRepeatData);
                    }
                    if (str[i].substring(20, 24).equals("1362")) {
                        SugarDao sugarDao = new SugarDao();
                        Sugar sugar = new Sugar();
                        sugar = sugarDao.queryUniqueObject("44");
                        Vector readNoRepeatData = new Vector();
                        readNoRepeatData.add(sugar.getCommodityId());
                        readNoRepeatData.add(sugar.getCommodityName());
                        readNoRepeatData.add(sugar.getManufacter());
                        readNoRepeatData.add(sugar.getPlace());
                        readNoRepeatData.add(sugar.getProductionDate());
                        readNoRepeatData.add(sugar.getWeight());
                        readNoRepeatData.add(sugar.getQuantity());
                        readNoRepeatData.add(sugar.getPrice());
                        readNoRepeatData.add(sugar.getBatchNumber());
                        readNoRepeatData.add(sugar.getDateOfEntry());
                        readNoRepeatData.add(sugar.getDateOfOut());
                        readNoRepeatData.add(sugar.getRemarks());
                        result.add(readNoRepeatData);
                    }
                    if (str[i].substring(20, 24).equals("2095")) {
                        SugarDao sugarDao = new SugarDao();
                        Sugar sugar = new Sugar();
                        sugar = sugarDao.queryUniqueObject("45");
                        Vector readNoRepeatData = new Vector();
                        readNoRepeatData.add(sugar.getCommodityId());
                        readNoRepeatData.add(sugar.getCommodityName());
                        readNoRepeatData.add(sugar.getManufacter());
                        readNoRepeatData.add(sugar.getPlace());
                        readNoRepeatData.add(sugar.getProductionDate());
                        readNoRepeatData.add(sugar.getWeight());
                        readNoRepeatData.add(sugar.getQuantity());
                        readNoRepeatData.add(sugar.getPrice());
                        readNoRepeatData.add(sugar.getBatchNumber());
                        readNoRepeatData.add(sugar.getDateOfEntry());
                        readNoRepeatData.add(sugar.getDateOfOut());
                        readNoRepeatData.add(sugar.getRemarks());
                        result.add(readNoRepeatData);
                    }
                    if (str[i].substring(20, 24).equals("3B3A")) {
                        SugarDao sugarDao = new SugarDao();
                        Sugar sugar = new Sugar();
                        sugar = sugarDao.queryUniqueObject("46");
                        Vector readNoRepeatData = new Vector();
                        readNoRepeatData.add(sugar.getCommodityId());
                        readNoRepeatData.add(sugar.getCommodityName());
                        readNoRepeatData.add(sugar.getManufacter());
                        readNoRepeatData.add(sugar.getPlace());
                        readNoRepeatData.add(sugar.getProductionDate());
                        readNoRepeatData.add(sugar.getWeight());
                        readNoRepeatData.add(sugar.getQuantity());
                        readNoRepeatData.add(sugar.getPrice());
                        readNoRepeatData.add(sugar.getBatchNumber());
                        readNoRepeatData.add(sugar.getDateOfEntry());
                        readNoRepeatData.add(sugar.getDateOfOut());
                        readNoRepeatData.add(sugar.getRemarks());
                        result.add(readNoRepeatData);
                    }
                    if (str[i].substring(20, 24).equals("3931")) {
                        SugarDao sugarDao = new SugarDao();
                        Sugar sugar = new Sugar();
                        sugar = sugarDao.queryUniqueObject("47");
                        Vector readNoRepeatData = new Vector();
                        readNoRepeatData.add(sugar.getCommodityId());
                        readNoRepeatData.add(sugar.getCommodityName());
                        readNoRepeatData.add(sugar.getManufacter());
                        readNoRepeatData.add(sugar.getPlace());
                        readNoRepeatData.add(sugar.getProductionDate());
                        readNoRepeatData.add(sugar.getWeight());
                        readNoRepeatData.add(sugar.getQuantity());
                        readNoRepeatData.add(sugar.getPrice());
                        readNoRepeatData.add(sugar.getBatchNumber());
                        readNoRepeatData.add(sugar.getDateOfEntry());
                        readNoRepeatData.add(sugar.getDateOfOut());
                        readNoRepeatData.add(sugar.getRemarks());
                        result.add(readNoRepeatData);
                    }
                    if (str[i].substring(20, 24).equals("3330")) {
                        SugarDao sugarDao = new SugarDao();
                        Sugar sugar = new Sugar();
                        sugar = sugarDao.queryUniqueObject("48");
                        Vector readNoRepeatData = new Vector();
                        readNoRepeatData.add(sugar.getCommodityId());
                        readNoRepeatData.add(sugar.getCommodityName());
                        readNoRepeatData.add(sugar.getManufacter());
                        readNoRepeatData.add(sugar.getPlace());
                        readNoRepeatData.add(sugar.getProductionDate());
                        readNoRepeatData.add(sugar.getWeight());
                        readNoRepeatData.add(sugar.getQuantity());
                        readNoRepeatData.add(sugar.getPrice());
                        readNoRepeatData.add(sugar.getBatchNumber());
                        readNoRepeatData.add(sugar.getDateOfEntry());
                        readNoRepeatData.add(sugar.getDateOfOut());
                        readNoRepeatData.add(sugar.getRemarks());
                        result.add(readNoRepeatData);
                    }
                    if (str[i].substring(20, 24).equals("27B0")) {
                        SugarDao sugarDao = new SugarDao();
                        Sugar sugar = new Sugar();
                        sugar = sugarDao.queryUniqueObject("49");
                        Vector readNoRepeatData = new Vector();
                        readNoRepeatData.add(sugar.getCommodityId());
                        readNoRepeatData.add(sugar.getCommodityName());
                        readNoRepeatData.add(sugar.getManufacter());
                        readNoRepeatData.add(sugar.getPlace());
                        readNoRepeatData.add(sugar.getProductionDate());
                        readNoRepeatData.add(sugar.getWeight());
                        readNoRepeatData.add(sugar.getQuantity());
                        readNoRepeatData.add(sugar.getPrice());
                        readNoRepeatData.add(sugar.getBatchNumber());
                        readNoRepeatData.add(sugar.getDateOfEntry());
                        readNoRepeatData.add(sugar.getDateOfOut());
                        readNoRepeatData.add(sugar.getRemarks());
                        result.add(readNoRepeatData);
                    }
                    if (str[i].substring(20, 24).equals("2D5E")) {
                        SugarDao sugarDao = new SugarDao();
                        Sugar sugar = new Sugar();
                        sugar = sugarDao.queryUniqueObject("50");
                        Vector readNoRepeatData = new Vector();
                        readNoRepeatData.add(sugar.getCommodityId());
                        readNoRepeatData.add(sugar.getCommodityName());
                        readNoRepeatData.add(sugar.getManufacter());
                        readNoRepeatData.add(sugar.getPlace());
                        readNoRepeatData.add(sugar.getProductionDate());
                        readNoRepeatData.add(sugar.getWeight());
                        readNoRepeatData.add(sugar.getQuantity());
                        readNoRepeatData.add(sugar.getPrice());
                        readNoRepeatData.add(sugar.getBatchNumber());
                        readNoRepeatData.add(sugar.getDateOfEntry());
                        readNoRepeatData.add(sugar.getDateOfOut());
                        readNoRepeatData.add(sugar.getRemarks());
                        result.add(readNoRepeatData);
                    }
                    TableModel model = new DefaultTableModel(result, colNames) {
                        public Class<?> getColumnClass(int column) {
//                            Class returnValue; 
//                            if (getRowCount()>0) 
//                               { 
//                                   returnValue = getValueAt(0,column).getClass(); 
//                                } 
//                                else{ 
//                                    returnValue = int.class; 
//                                } 
                            return Integer.class;
                        }
                    };

                    jTable1.setModel(model);
                    RowSorter sorter = new TableRowSorter(model);
                    jTable1.setRowSorter(sorter);

//                        jTable1.setAutoCreateRowSorter (true);
                    jTable1.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);

                    jTable1.getColumnModel()
                            .getColumn(0).setPreferredWidth(60);
                    jTable1.getColumnModel()
                            .getColumn(1).setPreferredWidth(60);
                    jTable1.getColumnModel()
                            .getColumn(2).setPreferredWidth(90);
                    jTable1.getColumnModel()
                            .getColumn(3).setPreferredWidth(60);
                    jTable1.getColumnModel()
                            .getColumn(4).setPreferredWidth(80);
                    jTable1.getColumnModel()
                            .getColumn(5).setPreferredWidth(60);
                    jTable1.getColumnModel()
                            .getColumn(6).setPreferredWidth(60);
                    jTable1.getColumnModel()
                            .getColumn(7).setPreferredWidth(60);
                    jTable1.getColumnModel()
                            .getColumn(8).setPreferredWidth(90);
                    jTable1.getColumnModel()
                            .getColumn(9).setPreferredWidth(80);
                    jTable1.getColumnModel()
                            .getColumn(10).setPreferredWidth(80);
                    jTable1.getColumnModel()
                            .getColumn(11).setPreferredWidth(60);
                    
                    float bestRP = 0;
        float bestRW = 0;
        float bestWP = 0;
        float bestWW = 0;
        float WP = 0;
        float WW = 0;
        float YP = 0;
        float YW = 0;

        for (int j = 0; j < result.size(); j++) {
            Vector vector = new Vector();
            vector = (Vector) result.get(j);

//           int lengthP=vector.get(7).toString().length();
//           int lengthW=vector.get(5).toString().length();
//           int length=vector.get(6).toString().length();
            if (vector.get(1).toString().equals("特级红糖")) {
                bestRP += Float.parseFloat(vector.get(7).toString()) * Integer.parseInt(vector.get(6).toString());
                bestRW += Float.parseFloat(vector.get(5).toString()) * Integer.parseInt(vector.get(6).toString()) / 1000.0;
            }
            if (vector.get(1).toString().equals("特级白糖")) {
                bestWP += Float.parseFloat(vector.get(7).toString()) * Integer.parseInt(vector.get(6).toString());
                bestWW += Float.parseFloat(vector.get(5).toString()) * Integer.parseInt(vector.get(6).toString()) / 1000.0;
            }
            if (vector.get(1).toString().equals("白砂糖")) {
                WP += Float.parseFloat(vector.get(7).toString()) * Integer.parseInt(vector.get(6).toString());
                WW += Float.parseFloat(vector.get(5).toString()) * Integer.parseInt(vector.get(6).toString()) / 1000.0;
            }
            if (vector.get(1).toString().equals("黄糖")) {
                YP += Float.parseFloat(vector.get(7).toString()) * Integer.parseInt(vector.get(6).toString());
                YW += Float.parseFloat(vector.get(5).toString()) * Integer.parseInt(vector.get(6).toString()) / 1000.0;
            }
        }

        jTextField3_WeightBR.setText(String.valueOf(bestRW));
        jTextField4_PriceBR.setText(String.valueOf(bestRP));
        jTextField5_WeightBW.setText(String.valueOf(bestWW));
        jTextField6_PriceBW.setText(String.valueOf(bestWP));
        jTextField7_WeightW.setText(String.valueOf(WW));
        jTextField8_PriceW.setText(String.valueOf(WP));
        jTextField9_WeightY.setText(String.valueOf(YW));
        jTextField10_PriceW.setText(String.valueOf(YP));
        jTextField11_totalWeight.setText(String.valueOf(bestRW + bestWW + WW + YW) + " Kg");
        jTextField12_totalPrice.setText(String.valueOf(bestRP + bestWP + WP + YP) + " 元");

                }
             
                if (str[i].substring(0, 2).equals("15")) {
                    setTitle("车辆进出站管理系统");
                    if (str[i].substring(20, 24).equals("6CA8")) {
                        ParkingDao parkingDao = new ParkingDao();
                        Parking parking = new Parking();
                        parking = parkingDao.queryUniqueObject("1");
                        Vector readNoRepeatData = new Vector();
                        readNoRepeatData.add(parking.getSequenceId());
                        readNoRepeatData.add(parking.getPlateNumber());
                        readNoRepeatData.add(parking.getOwnerName());
                        readNoRepeatData.add(parking.getIdCard());
                    
                        readNoRepeatData.add(parking.getTelephone());
                        readNoRepeatData.add(parking.getEntrance());
                        readNoRepeatData.add(parking.getExit());
                        readNoRepeatData.add(parking.getConsumption());
                        
                        readNoRepeatData.add(parking.getBalanceOfCard());
                        readNoRepeatData.add(parking.getRemarks());
                        result.add(readNoRepeatData);
                    }
                    if (str[i].substring(20, 24).equals("6CA4")) {
                        ParkingDao parkingDao = new ParkingDao();
                        Parking parking = new Parking();
                        parking = parkingDao.queryUniqueObject("2");
                        Vector readNoRepeatData = new Vector();
                        readNoRepeatData.add(parking.getSequenceId());
                        readNoRepeatData.add(parking.getPlateNumber());
                        readNoRepeatData.add(parking.getOwnerName());
                        readNoRepeatData.add(parking.getIdCard());
                    
                        readNoRepeatData.add(parking.getTelephone());
                        readNoRepeatData.add(parking.getEntrance());
                        readNoRepeatData.add(parking.getExit());
                        readNoRepeatData.add(parking.getConsumption());
                        
                        readNoRepeatData.add(parking.getBalanceOfCard());
                        readNoRepeatData.add(parking.getRemarks());
                        result.add(readNoRepeatData);
                    }
                    if (str[i].substring(20, 24).equals("2095")) {
                        ParkingDao parkingDao = new ParkingDao();
                        Parking parking = new Parking();
                        parking = parkingDao.queryUniqueObject("3");
                        Vector readNoRepeatData = new Vector();
                        readNoRepeatData.add(parking.getSequenceId());
                        readNoRepeatData.add(parking.getPlateNumber());
                        readNoRepeatData.add(parking.getOwnerName());
                        readNoRepeatData.add(parking.getIdCard());
                    
                        readNoRepeatData.add(parking.getTelephone());
                        readNoRepeatData.add(parking.getEntrance());
                        readNoRepeatData.add(parking.getExit());
                        readNoRepeatData.add(parking.getConsumption());
                        
                        readNoRepeatData.add(parking.getBalanceOfCard());
                        readNoRepeatData.add(parking.getRemarks());
                        result.add(readNoRepeatData);
                    }
                    if (str[i].substring(20, 24).equals("9001")) {
                        ParkingDao parkingDao = new ParkingDao();
                        Parking parking = new Parking();
                        parking = parkingDao.queryUniqueObject("4");
                        Vector readNoRepeatData = new Vector();
                        readNoRepeatData.add(parking.getSequenceId());
                        readNoRepeatData.add(parking.getPlateNumber());
                        readNoRepeatData.add(parking.getOwnerName());
                        readNoRepeatData.add(parking.getIdCard());
                    
                        readNoRepeatData.add(parking.getTelephone());
                        readNoRepeatData.add(parking.getEntrance());
                        readNoRepeatData.add(parking.getExit());
                        readNoRepeatData.add(parking.getConsumption());
                        
                        readNoRepeatData.add(parking.getBalanceOfCard());
                        readNoRepeatData.add(parking.getRemarks());
                        result.add(readNoRepeatData);
                    }
                    if (str[i].substring(20, 24).equals("75B0")) {
                        ParkingDao parkingDao = new ParkingDao();
                        Parking parking = new Parking();
                        parking = parkingDao.queryUniqueObject("5");
                        Vector readNoRepeatData = new Vector();
                        readNoRepeatData.add(parking.getSequenceId());
                        readNoRepeatData.add(parking.getPlateNumber());
                        readNoRepeatData.add(parking.getOwnerName());
                        readNoRepeatData.add(parking.getIdCard());
                    
                        readNoRepeatData.add(parking.getTelephone());
                        readNoRepeatData.add(parking.getEntrance());
                        readNoRepeatData.add(parking.getExit());
                        readNoRepeatData.add(parking.getConsumption());
                        
                        readNoRepeatData.add(parking.getBalanceOfCard());
                        readNoRepeatData.add(parking.getRemarks());
                        result.add(readNoRepeatData);
                    }
                    Vector colNames1 = new Vector();
                    colNames1.add("编号");
                    colNames1.add("车牌号");
                    colNames1.add("车主姓名");
                    colNames1.add("身份证号");
                    colNames1.add("手机号码");
                    colNames1.add("进站口");
                    colNames1.add("离站口");
                    colNames1.add("本次消费");
                    colNames1.add("卡内余额");
                    colNames1.add("备注");
                    TableModel model = new DefaultTableModel(result, colNames1) {
                        public Class<?> getColumnClass(int column) {
//                            Class returnValue; 
//                            if (getRowCount()>0) 
//                               { 
//                                   returnValue = getValueAt(0,column).getClass(); 
//                                } 
//                                else{ 
//                                    returnValue = int.class; 
//                                } 
                            return Integer.class;
                        }
                    };

                    jTable1.setModel(model);
                    RowSorter sorter = new TableRowSorter(model);
                    jTable1.setRowSorter(sorter);

//                        jTable1.setAutoCreateRowSorter (true);
                    jTable1.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);

                    jTable1.getColumnModel()
                            .getColumn(0).setPreferredWidth(50);
                    jTable1.getColumnModel()
                            .getColumn(1).setPreferredWidth(70);
                    jTable1.getColumnModel()
                            .getColumn(2).setPreferredWidth(60);
                    jTable1.getColumnModel()
                            .getColumn(3).setPreferredWidth(140);
                    jTable1.getColumnModel()
                            .getColumn(4).setPreferredWidth(90);
                    jTable1.getColumnModel()
                            .getColumn(5).setPreferredWidth(60);
                    jTable1.getColumnModel()
                            .getColumn(6).setPreferredWidth(60);
                    jTable1.getColumnModel()
                            .getColumn(7).setPreferredWidth(60);
                    jTable1.getColumnModel()
                            .getColumn(8).setPreferredWidth(60);
                    jTable1.getColumnModel()
                            .getColumn(9).setPreferredWidth(60);
                   
                    jPanel8_input.setVisible(false);
                    jPanel9_select.setVisible(false);
                    jPanel10_date.setVisible(false);
                    jPanel11.setVisible(false);
                    jPanel7.setVisible(false);
                    jPanel8_car_condition.setVisible(true);
                    jPanel8_car.setVisible(true);
            }
            }

        }
        jTextField3_readCount.setText(Integer.toString(strLength));
        jTextField2_labelCount.setText(Integer.toString(result.size()));

        

    }//GEN-LAST:event_jButton7_readOnceActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        String ip = jComboBox2.getSelectedItem().toString();
        int port = Integer.parseInt(jTextField1.getText());
        MainHandler handler = new MainHandler();
        if (handler.dllInit("R2k.dll")) {
            if (handler.deviceInit(ip, 0, port)) {
                handler.deviceDisconnect();
            }
            jTextField4_replayConnect.setText("");
        }// TODO add your handling code here:
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        String ip = jComboBox2.getSelectedItem().toString();
        int port = Integer.parseInt(jTextField1.getText());
        MainHandler handler = new MainHandler();
        if (handler.dllInit("R2k.dll")) {
            if (handler.deviceInit(ip, 0, port)) {
                handler.deviceUnInit();
            }
            jTextField4_replayConnect.setText("");
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jTextField3_readCountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField3_readCountActionPerformed

    }//GEN-LAST:event_jTextField3_readCountActionPerformed

    private void jButton1_readAntActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1_readAntActionPerformed

        MainHandler handler = new MainHandler();
        if (jTextField4_replayConnect.getText().equals("天线已连接！") || jTextField4_replayConnect.getText().equals("设置天线参数成功！")) {
            if (handler.dllInit("R2k.dll")) {
                if (handler.deviceInit("10.10.100.254", 0, 20058)) {
                    AntStruct struct = handler.GetAnt();
                    for (int i = 0; i < 4; i++) {
                        System.out.println("天线" + (i + 1) + (struct.antEnable[i] == 1 ? "——已连接" : "——未连接")
                                + "——工作时间:" + struct.dwellTime[i] + "ms——功率:" + struct.power[i].longValue() / 10 + "dBm");
                        jCheckBox1_antNum1.setSelected(true);
                        jComboBox1_antNum1Time.setSelectedItem(struct.dwellTime[0]);
                        jComboBox3_antNum1Power.setSelectedItem(struct.power[0].longValue() / 10);
                    }
                    jTextField4_replayConnect.setText("读取天线成功！");
                }
            }
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1_readAntActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        MainHandler handler = new MainHandler();
        if (handler.dllInit("R2k.dll")) {
            if (jTextField4_replayConnect.getText().equals("天线已连接！") || jTextField4_replayConnect.getText().equals("读取天线成功！")) {
                byte[] antEnable = new byte[]{jCheckBox1_antNum1.isSelected() ? (byte) 1 : 0, jCheckBox2_antNum2.isSelected() ? (byte) 1 : 0,
                    jCheckBox3_antNum3.isSelected() ? (byte) 1 : 0, jCheckBox4_antNum4.isSelected() ? (byte) 1 : 0};
                long[] dwellTime = new long[]{Integer.parseInt(String.valueOf(jComboBox1_antNum1Time.getSelectedItem())),
                    Integer.parseInt(String.valueOf(jComboBox4_antNum2Time.getSelectedItem())),
                    Integer.parseInt(String.valueOf(jComboBox6_antNum3Time.getSelectedItem())),
                    Integer.parseInt(String.valueOf(jComboBox8_antNum4Time.getSelectedItem()))};
                long[] power = new long[]{Integer.parseInt(String.valueOf(jComboBox3_antNum1Power.getSelectedItem())) * 10,
                    Integer.parseInt(String.valueOf(jComboBox5_antNum2Power.getSelectedItem())) * 10,
                    Integer.parseInt(String.valueOf(jComboBox7_antNum3Power.getSelectedItem())) * 10,
                    Integer.parseInt(String.valueOf(jComboBox9_antNum4Power.getSelectedItem())) * 10};
                try {
                    if (handler.SetAnt(antEnable, dwellTime, power)) {
                        System.out.println("设置天线参数成功！");
                        AntStruct struct = handler.GetAnt();
                        for (int i = 0; i < 4; i++) {
                            System.out.println("天线" + (i + 1) + (struct.antEnable[i] == 1 ? "——已连接" : "——未连接")
                                    + "——工作时间:" + struct.dwellTime[i] + "ms——功率:" + struct.power[i].longValue() / 10 + "dBm");
                        }
                        jTextField4_replayConnect.setText("设置天线参数成功！");
                    } else {
                        System.out.println("设置天线参数失败！");
                    }
                } catch (RFIDException ex) {
                    Logger.getLogger(SugarSystemGUI.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
        }// TODO add your handling code here:
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        MainHandler handler = new MainHandler();
        handler.StopInv();// TODO add your handling code here:
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        jTextField2_labelCount.setText("0");
        jTextField3_readCount.setText("0");
        readData = null;
        result=new Vector();
        Vector colNames = new Vector();
        colNames.add("商品编号");
        colNames.add("商品名称");
        colNames.add("制造商");
        colNames.add("产地");
        colNames.add("生产日期");
        colNames.add("重量");
        colNames.add("数量");
        colNames.add("单价");
        colNames.add("批号");
        colNames.add("进库日期");
        colNames.add("出库日期");
        colNames.add("备注");

        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0);
       
        jTextField3_WeightBR.setText("0");
        jTextField4_PriceBR.setText("0");
        jTextField5_WeightBW.setText("0");
        jTextField6_PriceBW.setText("0");
        jTextField7_WeightW.setText("0");
        jTextField8_PriceW.setText("0");
        jTextField9_WeightY.setText("0");
        jTextField10_PriceW.setText("0");
        jTextField11_totalWeight.setText("0" + " Kg");
        jTextField12_totalPrice.setText("0" + " 元");


    }//GEN-LAST:event_jButton10ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        
        float bestRP = 0;
        float bestRW = 0;
        float bestWP = 0;
        float bestWW = 0;
        float WP = 0;
        float WW = 0;
        float YP = 0;
        float YW = 0;
        Vector colNames = new Vector();
        colNames.add("商品编号");
        colNames.add("商品名称");
        colNames.add("制造商");
        colNames.add("产地");
        colNames.add("生产日期");
        colNames.add("重量");
        colNames.add("数量");
        colNames.add("单价");
        colNames.add("批号");
        colNames.add("进库日期");
        colNames.add("出库日期");
        colNames.add("备注");
        Vector selectItem = new Vector();
        for (int i = 0; i < result.size(); i++) {
            Vector vector = new Vector();
            vector = (Vector) result.get(i);
//            System.out.println(jTextField2_inputMessage.getText()+ " "+vector.get(0).toString()+" "+jComboBox1_selectCondition.getSelectedItem().toString().equals("商品编号") +" " +jTextField2_inputMessage.getText().equals(vector.get(0).toString()));
            if (jComboBox1_selectCondition.getSelectedItem().toString().equals("商品编号") && jTextField2_inputMessage.getText().equals(vector.get(0).toString())) {
                selectItem.add(vector);
                if (vector.get(1).toString().equals("特级红糖")) {
                    bestRP += Float.parseFloat(vector.get(7).toString()) * Integer.parseInt(vector.get(6).toString());
                    bestRW += Float.parseFloat(vector.get(5).toString()) * Integer.parseInt(vector.get(6).toString()) / 1000.0;
                }
                if (vector.get(1).toString().equals("特级白糖")) {
                    bestWP += Float.parseFloat(vector.get(7).toString()) * Integer.parseInt(vector.get(6).toString());
                    bestWW += Float.parseFloat(vector.get(5).toString()) * Integer.parseInt(vector.get(6).toString()) / 1000.0;
                }
                if (vector.get(1).toString().equals("白砂糖")) {
                    WP += Float.parseFloat(vector.get(7).toString()) * Integer.parseInt(vector.get(6).toString());
                    WW += Float.parseFloat(vector.get(5).toString()) * Integer.parseInt(vector.get(6).toString()) / 1000.0;
                }
                if (vector.get(1).toString().equals("黄糖")) {
                    YP += Float.parseFloat(vector.get(7).toString()) * Integer.parseInt(vector.get(6).toString());
                    YW += Float.parseFloat(vector.get(5).toString()) * Integer.parseInt(vector.get(6).toString()) / 1000.0;
                }

            }
            if (jComboBox1_selectCondition.getSelectedItem().toString().equals("数量") && jTextField2_inputMessage.getText().equals(vector.get(6).toString())) {
                selectItem.add(vector);
                if (vector.get(1).toString().equals("特级红糖")) {
                    bestRP += Float.parseFloat(vector.get(7).toString()) * Integer.parseInt(vector.get(6).toString());
                    bestRW += Float.parseFloat(vector.get(5).toString()) * Integer.parseInt(vector.get(6).toString()) / 1000.0;
                }
                if (vector.get(1).toString().equals("特级白糖")) {
                    bestWP += Float.parseFloat(vector.get(7).toString()) * Integer.parseInt(vector.get(6).toString());
                    bestWW += Float.parseFloat(vector.get(5).toString()) * Integer.parseInt(vector.get(6).toString()) / 1000.0;
                }
                if (vector.get(1).toString().equals("白砂糖")) {
                    WP += Float.parseFloat(vector.get(7).toString()) * Integer.parseInt(vector.get(6).toString());
                    WW += Float.parseFloat(vector.get(5).toString()) * Integer.parseInt(vector.get(6).toString()) / 1000.0;
                }
                if (vector.get(1).toString().equals("黄糖")) {
                    YP += Float.parseFloat(vector.get(7).toString()) * Integer.parseInt(vector.get(6).toString());
                    YW += Float.parseFloat(vector.get(5).toString()) * Integer.parseInt(vector.get(6).toString()) / 1000.0;
                }
            }
            if (jComboBox1_selectCondition.getSelectedItem().toString().equals("批号") && jTextField2_inputMessage.getText().equals(vector.get(8).toString())) {
                selectItem.add(vector);
                if (vector.get(1).toString().equals("特级红糖")) {
                    bestRP += Float.parseFloat(vector.get(7).toString()) * Integer.parseInt(vector.get(6).toString());
                    bestRW += Float.parseFloat(vector.get(5).toString()) * Integer.parseInt(vector.get(6).toString()) / 1000.0;
                }
                if (vector.get(1).toString().equals("特级白糖")) {
                    bestWP += Float.parseFloat(vector.get(7).toString()) * Integer.parseInt(vector.get(6).toString());
                    bestWW += Float.parseFloat(vector.get(5).toString()) * Integer.parseInt(vector.get(6).toString()) / 1000.0;
                }
                if (vector.get(1).toString().equals("白砂糖")) {
                    WP += Float.parseFloat(vector.get(7).toString()) * Integer.parseInt(vector.get(6).toString());
                    WW += Float.parseFloat(vector.get(5).toString()) * Integer.parseInt(vector.get(6).toString()) / 1000.0;
                }
                if (vector.get(1).toString().equals("黄糖")) {
                    YP += Float.parseFloat(vector.get(7).toString()) * Integer.parseInt(vector.get(6).toString());
                    YW += Float.parseFloat(vector.get(5).toString()) * Integer.parseInt(vector.get(6).toString()) / 1000.0;
                }

            }
            if (jComboBox1_selectCondition.getSelectedItem().toString().equals("备注") && jTextField2_inputMessage.getText().equals(vector.get(11).toString())) {
                selectItem.add(vector);
                if (vector.get(1).toString().equals("特级红糖")) {
                    bestRP += Float.parseFloat(vector.get(7).toString()) * Integer.parseInt(vector.get(6).toString());
                    bestRW += Float.parseFloat(vector.get(5).toString()) * Integer.parseInt(vector.get(6).toString()) / 1000.0;
                }
                if (vector.get(1).toString().equals("特级白糖")) {
                    bestWP += Float.parseFloat(vector.get(7).toString()) * Integer.parseInt(vector.get(6).toString());
                    bestWW += Float.parseFloat(vector.get(5).toString()) * Integer.parseInt(vector.get(6).toString()) / 1000.0;
                }
                if (vector.get(1).toString().equals("白砂糖")) {
                    WP += Float.parseFloat(vector.get(7).toString()) * Integer.parseInt(vector.get(6).toString());
                    WW += Float.parseFloat(vector.get(5).toString()) * Integer.parseInt(vector.get(6).toString()) / 1000.0;
                }
                if (vector.get(1).toString().equals("黄糖")) {
                    YP += Float.parseFloat(vector.get(7).toString()) * Integer.parseInt(vector.get(6).toString());
                    YW += Float.parseFloat(vector.get(5).toString()) * Integer.parseInt(vector.get(6).toString()) / 1000.0;
                }

            }
        }
        jTextField3_WeightBR.setText(String.valueOf(bestRW));
        jTextField4_PriceBR.setText(String.valueOf(bestRP));
        jTextField5_WeightBW.setText(String.valueOf(bestWW));
        jTextField6_PriceBW.setText(String.valueOf(bestWP));
        jTextField7_WeightW.setText(String.valueOf(WW));
        jTextField8_PriceW.setText(String.valueOf(WP));
        jTextField9_WeightY.setText(String.valueOf(YW));
        jTextField10_PriceW.setText(String.valueOf(YP));
        jTextField11_totalWeight.setText(String.valueOf(bestRW + bestWW + WW + YW) + " Kg");
        jTextField12_totalPrice.setText(String.valueOf(bestRP + bestWP + WP + YP) + " 元");

        TableModel model = new DefaultTableModel(selectItem,colNames) {
            public Class<?> getColumnClass(int column) {
                return Integer.class;
            }
        };

        jTable1.setModel(model);
        RowSorter sorter = new TableRowSorter(model);
        jTable1.setRowSorter(sorter);

//                        jTable1.setAutoCreateRowSorter (true);
        jTable1.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);

        jTable1.getColumnModel()
                .getColumn(0).setPreferredWidth(60);
        jTable1.getColumnModel()
                .getColumn(1).setPreferredWidth(60);
        jTable1.getColumnModel()
                .getColumn(2).setPreferredWidth(90);
        jTable1.getColumnModel()
                .getColumn(3).setPreferredWidth(60);
        jTable1.getColumnModel()
                .getColumn(4).setPreferredWidth(80);
        jTable1.getColumnModel()
                .getColumn(5).setPreferredWidth(60);
        jTable1.getColumnModel()
                .getColumn(6).setPreferredWidth(60);
        jTable1.getColumnModel()
                .getColumn(7).setPreferredWidth(60);
        jTable1.getColumnModel()
                .getColumn(8).setPreferredWidth(90);
        jTable1.getColumnModel()
                .getColumn(9).setPreferredWidth(80);
        jTable1.getColumnModel()
                .getColumn(10).setPreferredWidth(80);
        jTable1.getColumnModel()
                .getColumn(11).setPreferredWidth(60);
        

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTextField5_WeightBWActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField5_WeightBWActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField5_WeightBWActionPerformed

    private void jComboBox1_selectConditionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1_selectConditionActionPerformed
        if (jComboBox1_selectCondition.getSelectedItem().toString().equals("商品编号") || jComboBox1_selectCondition.getSelectedItem().toString().equals("数量") || jComboBox1_selectCondition.getSelectedItem().toString().equals("批号") || jComboBox1_selectCondition.getSelectedItem().toString().equals("备注")) {
            jPanel8_input.setVisible(true);
            jPanel9_select.setVisible(false);
            jPanel10_date.setVisible(false);
        }
        if (jComboBox1_selectCondition.getSelectedItem().toString().equals("商品名称") || jComboBox1_selectCondition.getSelectedItem().toString().equals("产地") || jComboBox1_selectCondition.getSelectedItem().toString().equals("制造商") || jComboBox1_selectCondition.getSelectedItem().toString().equals("重量") || jComboBox1_selectCondition.getSelectedItem().toString().equals("单价")) {
            jPanel8_input.setVisible(false);
            jPanel9_select.setVisible(true);
            jPanel10_date.setVisible(false);
            if (jComboBox1_selectCondition.getSelectedItem().toString().equals("商品名称")) {
                String[] arr = {"特级红糖", "特级白糖", "白砂糖", "黄糖"};
                final ComboBoxModel cbm = new DefaultComboBoxModel(arr);
                jComboBox3_selectMessage.setModel(cbm);
            }
            if (jComboBox1_selectCondition.getSelectedItem().toString().equals("产地")) {
                String[] arr = {"南宁", "武鸣", "贵港"};
                final ComboBoxModel cbm = new DefaultComboBoxModel(arr);
                jComboBox3_selectMessage.setModel(cbm);
            }
            if (jComboBox1_selectCondition.getSelectedItem().toString().equals("制造商")) {
                String[] arr = {"贵港金光糖厂", "广西农垦集团", "南宁甜田糖厂", "武鸣金源糖厂"};
                final ComboBoxModel cbm = new DefaultComboBoxModel(arr);
                jComboBox3_selectMessage.setModel(cbm);
            }
            if (jComboBox1_selectCondition.getSelectedItem().toString().equals("重量")) {
                String[] arr = {"200.0克/包", "300.0克/包", "400.0克/包", "500.0克/包", "750.0克/包", "1000.0克/包", "1250.0克/包", "1500克/包"};
                final ComboBoxModel cbm = new DefaultComboBoxModel(arr);
                jComboBox3_selectMessage.setModel(cbm);
            }
            if (jComboBox1_selectCondition.getSelectedItem().toString().equals("单价")) {
                String[] arr = {"2.0元/包", "3.0元/包", "4.0元/包", "5.0元/包", "7.5元/包", "10.0元/包", "12.5元/包", "15元/包"};
                final ComboBoxModel cbm = new DefaultComboBoxModel(arr);
                jComboBox3_selectMessage.setModel(cbm);
            }
        }
        if (jComboBox1_selectCondition.getSelectedItem().toString().equals("进库日期") || jComboBox1_selectCondition.getSelectedItem().toString().equals("出库日期") || jComboBox1_selectCondition.getSelectedItem().toString().equals("生产日期")) {
            jPanel8_input.setVisible(false);
            jPanel9_select.setVisible(false);
            jPanel10_date.setVisible(true);
        }
    }//GEN-LAST:event_jComboBox1_selectConditionActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        float bestRP = 0;
        float bestRW = 0;
        float bestWP = 0;
        float bestWW = 0;
        float WP = 0;
        float WW = 0;
        float YP = 0;
        float YW = 0;
        Vector colNames = new Vector();
        colNames.add("商品编号");
        colNames.add("商品名称");
        colNames.add("制造商");
        colNames.add("产地");
        colNames.add("生产日期");
        colNames.add("重量");
        colNames.add("数量");
        colNames.add("单价");
        colNames.add("批号");
        colNames.add("进库日期");
        colNames.add("出库日期");
        colNames.add("备注");
        Vector selectItem = new Vector();
        for (int i = 0; i < result.size(); i++) {
            Vector vector = new Vector();
            vector = (Vector) result.get(i);
            if (jComboBox1_selectCondition.getSelectedItem().toString().equals("商品名称") && jComboBox3_selectMessage.getSelectedItem().toString().equals(vector.get(1).toString())) {
                selectItem.add(vector);
                if (vector.get(1).toString().equals("特级红糖")) {
                    bestRP += Float.parseFloat(vector.get(7).toString()) * Integer.parseInt(vector.get(6).toString());
                    bestRW += Float.parseFloat(vector.get(5).toString()) * Integer.parseInt(vector.get(6).toString()) / 1000.0;
                }
                if (vector.get(1).toString().equals("特级白糖")) {
                    bestWP += Float.parseFloat(vector.get(7).toString()) * Integer.parseInt(vector.get(6).toString());
                    bestWW += Float.parseFloat(vector.get(5).toString()) * Integer.parseInt(vector.get(6).toString()) / 1000.0;
                }
                if (vector.get(1).toString().equals("白砂糖")) {
                    WP += Float.parseFloat(vector.get(7).toString()) * Integer.parseInt(vector.get(6).toString());
                    WW += Float.parseFloat(vector.get(5).toString()) * Integer.parseInt(vector.get(6).toString()) / 1000.0;
                }
                if (vector.get(1).toString().equals("黄糖")) {
                    YP += Float.parseFloat(vector.get(7).toString()) * Integer.parseInt(vector.get(6).toString());
                    YW += Float.parseFloat(vector.get(5).toString()) * Integer.parseInt(vector.get(6).toString()) / 1000.0;
                }
            }
            if (jComboBox1_selectCondition.getSelectedItem().toString().equals("制造商") && jComboBox3_selectMessage.getSelectedItem().toString().equals(vector.get(2).toString())) {
                selectItem.add(vector);
                if (vector.get(1).toString().equals("特级红糖")) {
                    bestRP += Float.parseFloat(vector.get(7).toString()) * Integer.parseInt(vector.get(6).toString());
                    bestRW += Float.parseFloat(vector.get(5).toString()) * Integer.parseInt(vector.get(6).toString()) / 1000.0;
                }
                if (vector.get(1).toString().equals("特级白糖")) {
                    bestWP += Float.parseFloat(vector.get(7).toString()) * Integer.parseInt(vector.get(6).toString());
                    bestWW += Float.parseFloat(vector.get(5).toString()) * Integer.parseInt(vector.get(6).toString()) / 1000.0;
                }
                if (vector.get(1).toString().equals("白砂糖")) {
                    WP += Float.parseFloat(vector.get(7).toString()) * Integer.parseInt(vector.get(6).toString());
                    WW += Float.parseFloat(vector.get(5).toString()) * Integer.parseInt(vector.get(6).toString()) / 1000.0;
                }
                if (vector.get(1).toString().equals("黄糖")) {
                    YP += Float.parseFloat(vector.get(7).toString()) * Integer.parseInt(vector.get(6).toString());
                    YW += Float.parseFloat(vector.get(5).toString()) * Integer.parseInt(vector.get(6).toString()) / 1000.0;
                }

            }
            if (jComboBox1_selectCondition.getSelectedItem().toString().equals("产地") && jComboBox3_selectMessage.getSelectedItem().toString().equals(vector.get(3).toString())) {
                selectItem.add(vector);
                if (vector.get(1).toString().equals("特级红糖")) {
                    bestRP += Float.parseFloat(vector.get(7).toString()) * Integer.parseInt(vector.get(6).toString());
                    bestRW += Float.parseFloat(vector.get(5).toString()) * Integer.parseInt(vector.get(6).toString()) / 1000.0;
                }
                if (vector.get(1).toString().equals("特级白糖")) {
                    bestWP += Float.parseFloat(vector.get(7).toString()) * Integer.parseInt(vector.get(6).toString());
                    bestWW += Float.parseFloat(vector.get(5).toString()) * Integer.parseInt(vector.get(6).toString()) / 1000.0;
                }
                if (vector.get(1).toString().equals("白砂糖")) {
                    WP += Float.parseFloat(vector.get(7).toString()) * Integer.parseInt(vector.get(6).toString());
                    WW += Float.parseFloat(vector.get(5).toString()) * Integer.parseInt(vector.get(6).toString()) / 1000.0;
                }
                if (vector.get(1).toString().equals("黄糖")) {
                    YP += Float.parseFloat(vector.get(7).toString()) * Integer.parseInt(vector.get(6).toString());
                    YW += Float.parseFloat(vector.get(5).toString()) * Integer.parseInt(vector.get(6).toString()) / 1000.0;
                }
            }
//            System.out.println(jComboBox3_selectMessage.getSelectedItem().toString().substring(0, jComboBox3_selectMessage.getSelectedItem().toString().length() - 3) + " " + vector.get(5).toString());
//            System.out.println(jComboBox3_selectMessage.getSelectedItem().toString().substring(0, jComboBox3_selectMessage.getSelectedItem().toString().length() - 3).equals(vector.get(5).toString()));
            if (jComboBox1_selectCondition.getSelectedItem().toString().equals("重量") && jComboBox3_selectMessage.getSelectedItem().toString().substring(0, jComboBox3_selectMessage.getSelectedItem().toString().length() - 3).equals(vector.get(5).toString())) {
                selectItem.add(vector);
                if (vector.get(1).toString().equals("特级红糖")) {
                    bestRP += Float.parseFloat(vector.get(7).toString()) * Integer.parseInt(vector.get(6).toString());
                    bestRW += Float.parseFloat(vector.get(5).toString()) * Integer.parseInt(vector.get(6).toString()) / 1000.0;
                }
                if (vector.get(1).toString().equals("特级白糖")) {
                    bestWP += Float.parseFloat(vector.get(7).toString()) * Integer.parseInt(vector.get(6).toString());
                    bestWW += Float.parseFloat(vector.get(5).toString()) * Integer.parseInt(vector.get(6).toString()) / 1000.0;
                }
                if (vector.get(1).toString().equals("白砂糖")) {
                    WP += Float.parseFloat(vector.get(7).toString()) * Integer.parseInt(vector.get(6).toString());
                    WW += Float.parseFloat(vector.get(5).toString()) * Integer.parseInt(vector.get(6).toString()) / 1000.0;
                }
                if (vector.get(1).toString().equals("黄糖")) {
                    YP += Float.parseFloat(vector.get(7).toString()) * Integer.parseInt(vector.get(6).toString());
                    YW += Float.parseFloat(vector.get(5).toString()) * Integer.parseInt(vector.get(6).toString()) / 1000.0;
                }

            }
            if (jComboBox1_selectCondition.getSelectedItem().toString().equals("单价") && jComboBox3_selectMessage.getSelectedItem().toString().substring(0, jComboBox3_selectMessage.getSelectedItem().toString().length() - 3).equals(vector.get(7).toString())) {
                selectItem.add(vector);
                if (vector.get(1).toString().equals("特级红糖")) {
                    bestRP += Float.parseFloat(vector.get(7).toString()) * Integer.parseInt(vector.get(6).toString());
                    bestRW += Float.parseFloat(vector.get(5).toString()) * Integer.parseInt(vector.get(6).toString()) / 1000.0;
                }
                if (vector.get(1).toString().equals("特级白糖")) {
                    bestWP += Float.parseFloat(vector.get(7).toString()) * Integer.parseInt(vector.get(6).toString());
                    bestWW += Float.parseFloat(vector.get(5).toString()) * Integer.parseInt(vector.get(6).toString()) / 1000.0;
                }
                if (vector.get(1).toString().equals("白砂糖")) {
                    WP += Float.parseFloat(vector.get(7).toString()) * Integer.parseInt(vector.get(6).toString());
                    WW += Float.parseFloat(vector.get(5).toString()) * Integer.parseInt(vector.get(6).toString()) / 1000.0;
                }
                if (vector.get(1).toString().equals("黄糖")) {
                    YP += Float.parseFloat(vector.get(7).toString()) * Integer.parseInt(vector.get(6).toString());
                    YW += Float.parseFloat(vector.get(5).toString()) * Integer.parseInt(vector.get(6).toString()) / 1000.0;
                }

            }
        }
        jTextField3_WeightBR.setText(String.valueOf(bestRW));
        jTextField4_PriceBR.setText(String.valueOf(bestRP));
        jTextField5_WeightBW.setText(String.valueOf(bestWW));
        jTextField6_PriceBW.setText(String.valueOf(bestWP));
        jTextField7_WeightW.setText(String.valueOf(WW));
        jTextField8_PriceW.setText(String.valueOf(WP));
        jTextField9_WeightY.setText(String.valueOf(YW));
        jTextField10_PriceW.setText(String.valueOf(YP));
        jTextField11_totalWeight.setText(String.valueOf(bestRW + bestWW + WW + YW) + " Kg");
        jTextField12_totalPrice.setText(String.valueOf(bestRP + bestWP + WP + YP) + " 元");
        
        TableModel model = new DefaultTableModel(selectItem,colNames) {
            public Class<?> getColumnClass(int column) {
                return Integer.class;
            }
        };

        jTable1.setModel(model);
        RowSorter sorter = new TableRowSorter(model);
        jTable1.setRowSorter(sorter);

//                        jTable1.setAutoCreateRowSorter (true);
        jTable1.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);

        jTable1.getColumnModel()
                .getColumn(0).setPreferredWidth(60);
        jTable1.getColumnModel()
                .getColumn(1).setPreferredWidth(60);
        jTable1.getColumnModel()
                .getColumn(2).setPreferredWidth(90);
        jTable1.getColumnModel()
                .getColumn(3).setPreferredWidth(60);
        jTable1.getColumnModel()
                .getColumn(4).setPreferredWidth(80);
        jTable1.getColumnModel()
                .getColumn(5).setPreferredWidth(60);
        jTable1.getColumnModel()
                .getColumn(6).setPreferredWidth(60);
        jTable1.getColumnModel()
                .getColumn(7).setPreferredWidth(60);
        jTable1.getColumnModel()
                .getColumn(8).setPreferredWidth(90);
        jTable1.getColumnModel()
                .getColumn(9).setPreferredWidth(80);
        jTable1.getColumnModel()
                .getColumn(10).setPreferredWidth(80);
        jTable1.getColumnModel()
                .getColumn(11).setPreferredWidth(60);

    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        float bestRP = 0;
        float bestRW = 0;
        float bestWP = 0;
        float bestWW = 0;
        float WP = 0;
        float WW = 0;
        float YP = 0;
        float YW = 0;
        Vector colNames = new Vector();
        colNames.add("商品编号");
        colNames.add("商品名称");
        colNames.add("制造商");
        colNames.add("产地");
        colNames.add("生产日期");
        colNames.add("重量");
        colNames.add("数量");
        colNames.add("单价");
        colNames.add("批号");
        colNames.add("进库日期");
        colNames.add("出库日期");
        colNames.add("备注");
        Vector selectItem = new Vector();
        String startDate = jComboBox4_startYear.getSelectedItem().toString() + "-" + jComboBox5_startMonth.getSelectedItem().toString()
                + "-" + jComboBox6_startDate.getSelectedItem().toString();
        String endDate = jComboBox7_endYear.getSelectedItem().toString() + "-" + jComboBox9_endMonth.getSelectedItem().toString() + "-"
                + jComboBox8.getSelectedItem().toString();
        
        for (int i = 0; i < result.size(); i++) {
            Vector vector = new Vector();
            vector = (Vector) result.get(i);
            if (jComboBox1_selectCondition.getSelectedItem().toString().equals("生产日期") && startDate.compareTo(vector.get(4).toString()) < 0 && endDate.compareTo(vector.get(4).toString()) > 0) {
                selectItem.add(vector);
                if (vector.get(1).toString().equals("特级红糖")) {
                    bestRP += Float.parseFloat(vector.get(7).toString()) * Integer.parseInt(vector.get(6).toString());
                    bestRW += Float.parseFloat(vector.get(5).toString()) * Integer.parseInt(vector.get(6).toString()) / 1000.0;
                }
                if (vector.get(1).toString().equals("特级白糖")) {
                    bestWP += Float.parseFloat(vector.get(7).toString()) * Integer.parseInt(vector.get(6).toString());
                    bestWW += Float.parseFloat(vector.get(5).toString()) * Integer.parseInt(vector.get(6).toString()) / 1000.0;
                }
                if (vector.get(1).toString().equals("白砂糖")) {
                    WP += Float.parseFloat(vector.get(7).toString()) * Integer.parseInt(vector.get(6).toString());
                    WW += Float.parseFloat(vector.get(5).toString()) * Integer.parseInt(vector.get(6).toString()) / 1000.0;
                }
                if (vector.get(1).toString().equals("黄糖")) {
                    YP += Float.parseFloat(vector.get(7).toString()) * Integer.parseInt(vector.get(6).toString());
                    YW += Float.parseFloat(vector.get(5).toString()) * Integer.parseInt(vector.get(6).toString()) / 1000.0;
                }
            }
            if (jComboBox1_selectCondition.getSelectedItem().toString().equals("进库日期") && startDate.compareTo(vector.get(9).toString()) < 0 && endDate.compareTo(vector.get(9).toString()) > 0) {
                selectItem.add(vector);
                if (vector.get(1).toString().equals("特级红糖")) {
                    bestRP += Float.parseFloat(vector.get(7).toString()) * Integer.parseInt(vector.get(6).toString());
                    bestRW += Float.parseFloat(vector.get(5).toString()) * Integer.parseInt(vector.get(6).toString()) / 1000.0;
                }
                if (vector.get(1).toString().equals("特级白糖")) {
                    bestWP += Float.parseFloat(vector.get(7).toString()) * Integer.parseInt(vector.get(6).toString());
                    bestWW += Float.parseFloat(vector.get(5).toString()) * Integer.parseInt(vector.get(6).toString()) / 1000.0;
                }
                if (vector.get(1).toString().equals("白砂糖")) {
                    WP += Float.parseFloat(vector.get(7).toString()) * Integer.parseInt(vector.get(6).toString());
                    WW += Float.parseFloat(vector.get(5).toString()) * Integer.parseInt(vector.get(6).toString()) / 1000.0;
                }
                if (vector.get(1).toString().equals("黄糖")) {
                    YP += Float.parseFloat(vector.get(7).toString()) * Integer.parseInt(vector.get(6).toString());
                    YW += Float.parseFloat(vector.get(5).toString()) * Integer.parseInt(vector.get(6).toString()) / 1000.0;
                }
            }
            if (jComboBox1_selectCondition.getSelectedItem().toString().equals("出库日期") && startDate.compareTo(vector.get(10).toString()) < 0 && endDate.compareTo(vector.get(10).toString()) > 0) {
                selectItem.add(vector);
                if (vector.get(1).toString().equals("特级红糖")) {
                    bestRP += Float.parseFloat(vector.get(7).toString()) * Integer.parseInt(vector.get(6).toString());
                    bestRW += Float.parseFloat(vector.get(5).toString()) * Integer.parseInt(vector.get(6).toString()) / 1000.0;
                }
                if (vector.get(1).toString().equals("特级白糖")) {
                    bestWP += Float.parseFloat(vector.get(7).toString()) * Integer.parseInt(vector.get(6).toString());
                    bestWW += Float.parseFloat(vector.get(5).toString()) * Integer.parseInt(vector.get(6).toString()) / 1000.0;
                }
                if (vector.get(1).toString().equals("白砂糖")) {
                    WP += Float.parseFloat(vector.get(7).toString()) * Integer.parseInt(vector.get(6).toString());
                    WW += Float.parseFloat(vector.get(5).toString()) * Integer.parseInt(vector.get(6).toString()) / 1000.0;
                }
                if (vector.get(1).toString().equals("黄糖")) {
                    YP += Float.parseFloat(vector.get(7).toString()) * Integer.parseInt(vector.get(6).toString());
                    YW += Float.parseFloat(vector.get(5).toString()) * Integer.parseInt(vector.get(6).toString()) / 1000.0;
                }
            }
        }
        jTextField3_WeightBR.setText(String.valueOf(bestRW));
        jTextField4_PriceBR.setText(String.valueOf(bestRP));
        jTextField5_WeightBW.setText(String.valueOf(bestWW));
        jTextField6_PriceBW.setText(String.valueOf(bestWP));
        jTextField7_WeightW.setText(String.valueOf(WW));
        jTextField8_PriceW.setText(String.valueOf(WP));
        jTextField9_WeightY.setText(String.valueOf(YW));
        jTextField10_PriceW.setText(String.valueOf(YP));
        jTextField11_totalWeight.setText(String.valueOf(bestRW + bestWW + WW + YW) + " Kg");
        jTextField12_totalPrice.setText(String.valueOf(bestRP + bestWP + WP + YP) + " 元");
        
        TableModel model = new DefaultTableModel(selectItem,colNames) {
            public Class<?> getColumnClass(int column) {
                return Integer.class;
            }
        };

        jTable1.setModel(model);
        RowSorter sorter = new TableRowSorter(model);
        jTable1.setRowSorter(sorter);

//                        jTable1.setAutoCreateRowSorter (true);
        jTable1.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);

        jTable1.getColumnModel()
                .getColumn(0).setPreferredWidth(60);
        jTable1.getColumnModel()
                .getColumn(1).setPreferredWidth(60);
        jTable1.getColumnModel()
                .getColumn(2).setPreferredWidth(90);
        jTable1.getColumnModel()
                .getColumn(3).setPreferredWidth(60);
        jTable1.getColumnModel()
                .getColumn(4).setPreferredWidth(80);
        jTable1.getColumnModel()
                .getColumn(5).setPreferredWidth(60);
        jTable1.getColumnModel()
                .getColumn(6).setPreferredWidth(60);
        jTable1.getColumnModel()
                .getColumn(7).setPreferredWidth(60);
        jTable1.getColumnModel()
                .getColumn(8).setPreferredWidth(90);
        jTable1.getColumnModel()
                .getColumn(9).setPreferredWidth(80);
        jTable1.getColumnModel()
                .getColumn(10).setPreferredWidth(80);
        jTable1.getColumnModel()
                .getColumn(11).setPreferredWidth(60);
    }//GEN-LAST:event_jButton11ActionPerformed

    private void jComboBox3_selectMessageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox3_selectMessageActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox3_selectMessageActionPerformed

    private void jTextField6_PriceBWActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField6_PriceBWActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField6_PriceBWActionPerformed

    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed

        Vector colNames = new Vector();
        colNames.add("编号");
        colNames.add("车牌号");
        colNames.add("车主姓名");
        colNames.add("身份证号");
        colNames.add("手机号码");
        colNames.add("进站口");
        colNames.add("离站口");
        colNames.add("本次消费");
        colNames.add("卡内余额");
        colNames.add("备注");
        Vector selectItem = new Vector();
        for (int i = 0; i < result.size(); i++) {
            Vector vector = new Vector();
            vector = (Vector) result.get(i);
//            System.out.println(jTextField2_inputMessage.getText()+ " "+vector.get(0).toString()+" "+jComboBox1_selectCondition.getSelectedItem().toString().equals("商品编号") +" " +jTextField2_inputMessage.getText().equals(vector.get(0).toString()));
            if (jComboBox1.getSelectedItem().toString().equals("编号") && jTextField2_car_text.getText().equals(vector.get(0).toString())) {
                selectItem.add(vector);
            }
            if (jComboBox1.getSelectedItem().toString().equals("车牌号") && jTextField2_car_text.getText().equals(vector.get(1).toString())) {
                selectItem.add(vector);
            }
            if (jComboBox1.getSelectedItem().toString().equals("车主姓名") && jTextField2_car_text.getText().equals(vector.get(2).toString())) {
                selectItem.add(vector);
            }
            if (jComboBox1.getSelectedItem().toString().equals("身份证号") && jTextField2_car_text.getText().equals(vector.get(3).toString())) {
                selectItem.add(vector);
            }
            if (jComboBox1.getSelectedItem().toString().equals("手机号码") && jTextField2_car_text.getText().equals(vector.get(4).toString())) {
                selectItem.add(vector);
            }
             if (jComboBox1.getSelectedItem().toString().equals("进站口") && jTextField2_car_text.getText().equals(vector.get(5).toString())) {
                selectItem.add(vector);
            }
            if (jComboBox1.getSelectedItem().toString().equals("离站口") && jTextField2_car_text.getText().equals(vector.get(6).toString())) {
                selectItem.add(vector);
            }
            if (jComboBox1.getSelectedItem().toString().equals("本次消费") && jTextField2_car_text.getText().equals(vector.get(7).toString())) {
                selectItem.add(vector);
            }
            if (jComboBox1.getSelectedItem().toString().equals("卡内余额") && jTextField2_car_text.getText().equals(vector.get(8).toString())) {
                selectItem.add(vector);
            }
            if (jComboBox1.getSelectedItem().toString().equals("备注") && jTextField2_car_text.getText().equals(vector.get(9).toString())) {
                selectItem.add(vector);
            }
        }
      

        TableModel model = new DefaultTableModel(selectItem,colNames) {
            public Class<?> getColumnClass(int column) {
                return Integer.class;
            }
        };

        jTable1.setModel(model);
        RowSorter sorter = new TableRowSorter(model);
        jTable1.setRowSorter(sorter);

//                        jTable1.setAutoCreateRowSorter (true);
        jTable1.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);

        jTable1.getColumnModel()
                .getColumn(0).setPreferredWidth(60);
        jTable1.getColumnModel()
                .getColumn(1).setPreferredWidth(80);
        jTable1.getColumnModel()
                .getColumn(2).setPreferredWidth(60);
        jTable1.getColumnModel()
                .getColumn(3).setPreferredWidth(140);
        jTable1.getColumnModel()
                .getColumn(4).setPreferredWidth(90);
        jTable1.getColumnModel()
                .getColumn(5).setPreferredWidth(60);
        jTable1.getColumnModel()
                .getColumn(6).setPreferredWidth(60);
        jTable1.getColumnModel()
                .getColumn(7).setPreferredWidth(60);
        jTable1.getColumnModel()
                .getColumn(8).setPreferredWidth(60);
        jTable1.getColumnModel()
                .getColumn(9).setPreferredWidth(80);
    }//GEN-LAST:event_jButton12ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
         MainHandler handler = new MainHandler();
        if (handler.dllInit("R2k.dll")) {
            if (handler.deviceInit("10.10.100.254", 0, 20058)) {
                try {
//                    System.out.println(handler.StopInv());
                    handler.BeginInv(this);   //回调函数
                    try {
                        Thread.sleep(2000);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(SugarSystemGUI.class.getName()).log(Level.SEVERE, null, ex);
                    }

                } catch (RFIDException ex) {
                    Logger.getLogger(SugarSystemGUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        
        String[] readDataString = readData.split(",");
        strLength = readDataString.length;

        HashSet<String> readDataSet = new HashSet<String>();
        for (int i = 0; i < readDataString.length; i++) {
            readDataSet.add(readDataString[i]);
        }

        Vector colNames = new Vector();
        colNames.add("商品编号");
        colNames.add("商品名称");
        colNames.add("制造商");
        colNames.add("产地");
        colNames.add("生产日期");
        colNames.add("重量");
        colNames.add("数量");
        colNames.add("单价");
        colNames.add("批号");
        colNames.add("进库日期");
        colNames.add("出库日期");
        colNames.add("备注");

//        {"id", "commodityId","commodityName", "manufacter", "place",
//            "productionDate", "weight", "quantity", "price", "batchNumber",
//            "dateOfEntry", "dateOfOut", "remarks"};
        String[] str = new String[readDataSet.size()];
        int m = 0;
        Iterator<String> iter = readDataSet.iterator();
//        for(int i=0;i<readDataSet.size();i++){
//             str[i]=readDataSet.
//        }
        ArrayList list = new ArrayList();
        while (iter.hasNext()) {
            str[m] = iter.next();
            m++;
        }
        System.out.println("str的长度为" + str.length + " " + str[1]);
        for (int i = 0; i < str.length; i++) {
            System.out.println("str为" + str[i]);
        }
        for (int i = 0; i < str.length; i++) {
            if (!str[i].equals("")) {
                if (str[i].substring(0, 2).equals("E2")) {
                    if (str[i].substring(20, 24).equals("1678")) {
                        SugarDao sugarDao = new SugarDao();
                        Sugar sugar = new Sugar();
                        sugar = sugarDao.queryUniqueObject("1");
                        Vector readNoRepeatData = new Vector();
                        readNoRepeatData.add(sugar.getCommodityId());
                        readNoRepeatData.add(sugar.getCommodityName());
                        readNoRepeatData.add(sugar.getManufacter());
                        readNoRepeatData.add(sugar.getPlace());
                        readNoRepeatData.add(sugar.getProductionDate());
                        readNoRepeatData.add(sugar.getWeight());
                        readNoRepeatData.add(sugar.getQuantity());
                        readNoRepeatData.add(sugar.getPrice());
                        readNoRepeatData.add(sugar.getBatchNumber());
                        readNoRepeatData.add(sugar.getDateOfEntry());
                        readNoRepeatData.add(sugar.getDateOfOut());
                        readNoRepeatData.add(sugar.getRemarks());
                        result.add(readNoRepeatData);
                    }
                    if (str[i].substring(20, 24).equals("0F09")) {
                        SugarDao sugarDao = new SugarDao();
                        Sugar sugar = new Sugar();
                        sugar = sugarDao.queryUniqueObject("2");
                        Vector readNoRepeatData = new Vector();
                        readNoRepeatData.add(sugar.getCommodityId());
                        readNoRepeatData.add(sugar.getCommodityName());
                        readNoRepeatData.add(sugar.getManufacter());
                        readNoRepeatData.add(sugar.getPlace());
                        readNoRepeatData.add(sugar.getProductionDate());
                        readNoRepeatData.add(sugar.getWeight());
                        readNoRepeatData.add(sugar.getQuantity());
                        readNoRepeatData.add(sugar.getPrice());
                        readNoRepeatData.add(sugar.getBatchNumber());
                        readNoRepeatData.add(sugar.getDateOfEntry());
                        readNoRepeatData.add(sugar.getDateOfOut());
                        readNoRepeatData.add(sugar.getRemarks());
                        result.add(readNoRepeatData);
                    }
                    if (str[i].substring(20, 24).equals("4588")) {
                        SugarDao sugarDao = new SugarDao();
                        Sugar sugar = new Sugar();
                        sugar = sugarDao.queryUniqueObject("3");
                        Vector readNoRepeatData = new Vector();
                        readNoRepeatData.add(sugar.getCommodityId());
                        readNoRepeatData.add(sugar.getCommodityName());
                        readNoRepeatData.add(sugar.getManufacter());
                        readNoRepeatData.add(sugar.getPlace());
                        readNoRepeatData.add(sugar.getProductionDate());
                        readNoRepeatData.add(sugar.getWeight());
                        readNoRepeatData.add(sugar.getQuantity());
                        readNoRepeatData.add(sugar.getPrice());
                        readNoRepeatData.add(sugar.getBatchNumber());
                        readNoRepeatData.add(sugar.getDateOfEntry());
                        readNoRepeatData.add(sugar.getDateOfOut());
                        readNoRepeatData.add(sugar.getRemarks());
                        result.add(readNoRepeatData);
                    }
                    if (str[i].substring(20, 24).equals("3F5E")) {
                        SugarDao sugarDao = new SugarDao();
                        Sugar sugar = new Sugar();
                        sugar = sugarDao.queryUniqueObject("4");
                        Vector readNoRepeatData = new Vector();
                        readNoRepeatData.add(sugar.getCommodityId());
                        readNoRepeatData.add(sugar.getCommodityName());
                        readNoRepeatData.add(sugar.getManufacter());
                        readNoRepeatData.add(sugar.getPlace());
                        readNoRepeatData.add(sugar.getProductionDate());
                        readNoRepeatData.add(sugar.getWeight());
                        readNoRepeatData.add(sugar.getQuantity());
                        readNoRepeatData.add(sugar.getPrice());
                        readNoRepeatData.add(sugar.getBatchNumber());
                        readNoRepeatData.add(sugar.getDateOfEntry());
                        readNoRepeatData.add(sugar.getDateOfOut());
                        readNoRepeatData.add(sugar.getRemarks());
                        result.add(readNoRepeatData);
                    }
                    if (str[i].substring(20, 24).equals("3735")) {
                        SugarDao sugarDao = new SugarDao();
                        Sugar sugar = new Sugar();
                        sugar = sugarDao.queryUniqueObject("5");
                        Vector readNoRepeatData = new Vector();
                        readNoRepeatData.add(sugar.getCommodityId());
                        readNoRepeatData.add(sugar.getCommodityName());
                        readNoRepeatData.add(sugar.getManufacter());
                        readNoRepeatData.add(sugar.getPlace());
                        readNoRepeatData.add(sugar.getProductionDate());
                        readNoRepeatData.add(sugar.getWeight());
                        readNoRepeatData.add(sugar.getQuantity());
                        readNoRepeatData.add(sugar.getPrice());
                        readNoRepeatData.add(sugar.getBatchNumber());
                        readNoRepeatData.add(sugar.getDateOfEntry());
                        readNoRepeatData.add(sugar.getDateOfOut());
                        readNoRepeatData.add(sugar.getRemarks());
                        result.add(readNoRepeatData);
                    }
                    if (str[i].substring(20, 24).equals("6CB0")) {
                        SugarDao sugarDao = new SugarDao();
                        Sugar sugar = new Sugar();
                        sugar = sugarDao.queryUniqueObject("6");
                        Vector readNoRepeatData = new Vector();
                        readNoRepeatData.add(sugar.getCommodityId());
                        readNoRepeatData.add(sugar.getCommodityName());
                        readNoRepeatData.add(sugar.getManufacter());
                        readNoRepeatData.add(sugar.getPlace());
                        readNoRepeatData.add(sugar.getProductionDate());
                        readNoRepeatData.add(sugar.getWeight());
                        readNoRepeatData.add(sugar.getQuantity());
                        readNoRepeatData.add(sugar.getPrice());
                        readNoRepeatData.add(sugar.getBatchNumber());
                        readNoRepeatData.add(sugar.getDateOfEntry());
                        readNoRepeatData.add(sugar.getDateOfOut());
                        readNoRepeatData.add(sugar.getRemarks());
                        result.add(readNoRepeatData);
                    }
                    if (str[i].substring(20, 24).equals("619B")) {
                        SugarDao sugarDao = new SugarDao();
                        Sugar sugar = new Sugar();
                        sugar = sugarDao.queryUniqueObject("7");
                        Vector readNoRepeatData = new Vector();
                        readNoRepeatData.add(sugar.getCommodityId());
                        readNoRepeatData.add(sugar.getCommodityName());
                        readNoRepeatData.add(sugar.getManufacter());
                        readNoRepeatData.add(sugar.getPlace());
                        readNoRepeatData.add(sugar.getProductionDate());
                        readNoRepeatData.add(sugar.getWeight());
                        readNoRepeatData.add(sugar.getQuantity());
                        readNoRepeatData.add(sugar.getPrice());
                        readNoRepeatData.add(sugar.getBatchNumber());
                        readNoRepeatData.add(sugar.getDateOfEntry());
                        readNoRepeatData.add(sugar.getDateOfOut());
                        readNoRepeatData.add(sugar.getRemarks());
                        result.add(readNoRepeatData);
                    }
                    if (str[i].substring(20, 24).equals("63CB")) {
                        SugarDao sugarDao = new SugarDao();
                        Sugar sugar = new Sugar();
                        sugar = sugarDao.queryUniqueObject("8");
                        Vector readNoRepeatData = new Vector();
                        readNoRepeatData.add(sugar.getCommodityId());
                        readNoRepeatData.add(sugar.getCommodityName());
                        readNoRepeatData.add(sugar.getManufacter());
                        readNoRepeatData.add(sugar.getPlace());
                        readNoRepeatData.add(sugar.getProductionDate());
                        readNoRepeatData.add(sugar.getWeight());
                        readNoRepeatData.add(sugar.getQuantity());
                        readNoRepeatData.add(sugar.getPrice());
                        readNoRepeatData.add(sugar.getBatchNumber());
                        readNoRepeatData.add(sugar.getDateOfEntry());
                        readNoRepeatData.add(sugar.getDateOfOut());
                        readNoRepeatData.add(sugar.getRemarks());
                        result.add(readNoRepeatData);
                    }
                    if (str[i].substring(20, 24).equals("14E2")) {
                        SugarDao sugarDao = new SugarDao();
                        Sugar sugar = new Sugar();
                        sugar = sugarDao.queryUniqueObject("9");
                        Vector readNoRepeatData = new Vector();
                        readNoRepeatData.add(sugar.getCommodityId());
                        readNoRepeatData.add(sugar.getCommodityName());
                        readNoRepeatData.add(sugar.getManufacter());
                        readNoRepeatData.add(sugar.getPlace());
                        readNoRepeatData.add(sugar.getProductionDate());
                        readNoRepeatData.add(sugar.getWeight());
                        readNoRepeatData.add(sugar.getQuantity());
                        readNoRepeatData.add(sugar.getPrice());
                        readNoRepeatData.add(sugar.getBatchNumber());
                        readNoRepeatData.add(sugar.getDateOfEntry());
                        readNoRepeatData.add(sugar.getDateOfOut());
                        readNoRepeatData.add(sugar.getRemarks());
                        result.add(readNoRepeatData);
                    }
                    if (str[i].substring(20, 24).equals("1818")) {
                        SugarDao sugarDao = new SugarDao();
                        Sugar sugar = new Sugar();
                        sugar = sugarDao.queryUniqueObject("10");
                        Vector readNoRepeatData = new Vector();
                        readNoRepeatData.add(sugar.getCommodityId());
                        readNoRepeatData.add(sugar.getCommodityName());
                        readNoRepeatData.add(sugar.getManufacter());
                        readNoRepeatData.add(sugar.getPlace());
                        readNoRepeatData.add(sugar.getProductionDate());
                        readNoRepeatData.add(sugar.getWeight());
                        readNoRepeatData.add(sugar.getQuantity());
                        readNoRepeatData.add(sugar.getPrice());
                        readNoRepeatData.add(sugar.getBatchNumber());
                        readNoRepeatData.add(sugar.getDateOfEntry());
                        readNoRepeatData.add(sugar.getDateOfOut());
                        readNoRepeatData.add(sugar.getRemarks());
                        result.add(readNoRepeatData);
                    }
                    if (str[i].substring(20, 24).equals("5035")) {
                        SugarDao sugarDao = new SugarDao();
                        Sugar sugar = new Sugar();
                        sugar = sugarDao.queryUniqueObject("11");
                        Vector readNoRepeatData = new Vector();
                        readNoRepeatData.add(sugar.getCommodityId());
                        readNoRepeatData.add(sugar.getCommodityName());
                        readNoRepeatData.add(sugar.getManufacter());
                        readNoRepeatData.add(sugar.getPlace());
                        readNoRepeatData.add(sugar.getProductionDate());
                        readNoRepeatData.add(sugar.getWeight());
                        readNoRepeatData.add(sugar.getQuantity());
                        readNoRepeatData.add(sugar.getPrice());
                        readNoRepeatData.add(sugar.getBatchNumber());
                        readNoRepeatData.add(sugar.getDateOfEntry());
                        readNoRepeatData.add(sugar.getDateOfOut());
                        readNoRepeatData.add(sugar.getRemarks());
                        result.add(readNoRepeatData);
                    }
                    if (str[i].substring(20, 24).equals("2089")) {
                        SugarDao sugarDao = new SugarDao();
                        Sugar sugar = new Sugar();
                        sugar = sugarDao.queryUniqueObject("12");
                        Vector readNoRepeatData = new Vector();
                        readNoRepeatData.add(sugar.getCommodityId());
                        readNoRepeatData.add(sugar.getCommodityName());
                        readNoRepeatData.add(sugar.getManufacter());
                        readNoRepeatData.add(sugar.getPlace());
                        readNoRepeatData.add(sugar.getProductionDate());
                        readNoRepeatData.add(sugar.getWeight());
                        readNoRepeatData.add(sugar.getQuantity());
                        readNoRepeatData.add(sugar.getPrice());
                        readNoRepeatData.add(sugar.getBatchNumber());
                        readNoRepeatData.add(sugar.getDateOfEntry());
                        readNoRepeatData.add(sugar.getDateOfOut());
                        readNoRepeatData.add(sugar.getRemarks());
                        result.add(readNoRepeatData);
                    }
                    if (str[i].substring(20, 24).equals("043B")) {
                        SugarDao sugarDao = new SugarDao();
                        Sugar sugar = new Sugar();
                        sugar = sugarDao.queryUniqueObject("13");
                        Vector readNoRepeatData = new Vector();
                        readNoRepeatData.add(sugar.getCommodityId());
                        readNoRepeatData.add(sugar.getCommodityName());
                        readNoRepeatData.add(sugar.getManufacter());
                        readNoRepeatData.add(sugar.getPlace());
                        readNoRepeatData.add(sugar.getProductionDate());
                        readNoRepeatData.add(sugar.getWeight());
                        readNoRepeatData.add(sugar.getQuantity());
                        readNoRepeatData.add(sugar.getPrice());
                        readNoRepeatData.add(sugar.getBatchNumber());
                        readNoRepeatData.add(sugar.getDateOfEntry());
                        readNoRepeatData.add(sugar.getDateOfOut());
                        readNoRepeatData.add(sugar.getRemarks());
                        result.add(readNoRepeatData);
                    }
                    if (str[i].substring(20, 24).equals("1369")) {
                        SugarDao sugarDao = new SugarDao();
                        Sugar sugar = new Sugar();
                        sugar = sugarDao.queryUniqueObject("14");
                        Vector readNoRepeatData = new Vector();
                        readNoRepeatData.add(sugar.getCommodityId());
                        readNoRepeatData.add(sugar.getCommodityName());
                        readNoRepeatData.add(sugar.getManufacter());
                        readNoRepeatData.add(sugar.getPlace());
                        readNoRepeatData.add(sugar.getProductionDate());
                        readNoRepeatData.add(sugar.getWeight());
                        readNoRepeatData.add(sugar.getQuantity());
                        readNoRepeatData.add(sugar.getPrice());
                        readNoRepeatData.add(sugar.getBatchNumber());
                        readNoRepeatData.add(sugar.getDateOfEntry());
                        readNoRepeatData.add(sugar.getDateOfOut());
                        readNoRepeatData.add(sugar.getRemarks());
                        result.add(readNoRepeatData);
                    }
                    if (str[i].substring(20, 24).equals("0F02")) {
                        SugarDao sugarDao = new SugarDao();
                        Sugar sugar = new Sugar();
                        sugar = sugarDao.queryUniqueObject("15");
                        Vector readNoRepeatData = new Vector();
                        readNoRepeatData.add(sugar.getCommodityId());
                        readNoRepeatData.add(sugar.getCommodityName());
                        readNoRepeatData.add(sugar.getManufacter());
                        readNoRepeatData.add(sugar.getPlace());
                        readNoRepeatData.add(sugar.getProductionDate());
                        readNoRepeatData.add(sugar.getWeight());
                        readNoRepeatData.add(sugar.getQuantity());
                        readNoRepeatData.add(sugar.getPrice());
                        readNoRepeatData.add(sugar.getBatchNumber());
                        readNoRepeatData.add(sugar.getDateOfEntry());
                        readNoRepeatData.add(sugar.getDateOfOut());
                        readNoRepeatData.add(sugar.getRemarks());
                        result.add(readNoRepeatData);
                    }
                    if (str[i].substring(20, 24).equals("0750")) {
                        SugarDao sugarDao = new SugarDao();
                        Sugar sugar = new Sugar();
                        sugar = sugarDao.queryUniqueObject("16");
                        Vector readNoRepeatData = new Vector();
                        readNoRepeatData.add(sugar.getCommodityId());
                        readNoRepeatData.add(sugar.getCommodityName());
                        readNoRepeatData.add(sugar.getManufacter());
                        readNoRepeatData.add(sugar.getPlace());
                        readNoRepeatData.add(sugar.getProductionDate());
                        readNoRepeatData.add(sugar.getWeight());
                        readNoRepeatData.add(sugar.getQuantity());
                        readNoRepeatData.add(sugar.getPrice());
                        readNoRepeatData.add(sugar.getBatchNumber());
                        readNoRepeatData.add(sugar.getDateOfEntry());
                        readNoRepeatData.add(sugar.getDateOfOut());
                        readNoRepeatData.add(sugar.getRemarks());
                        result.add(readNoRepeatData);
                    }
                    if (str[i].substring(20, 24).equals("2251")) {
                        SugarDao sugarDao = new SugarDao();
                        Sugar sugar = new Sugar();
                        sugar = sugarDao.queryUniqueObject("17");
                        Vector readNoRepeatData = new Vector();
                        readNoRepeatData.add(sugar.getCommodityId());
                        readNoRepeatData.add(sugar.getCommodityName());
                        readNoRepeatData.add(sugar.getManufacter());
                        readNoRepeatData.add(sugar.getPlace());
                        readNoRepeatData.add(sugar.getProductionDate());
                        readNoRepeatData.add(sugar.getWeight());
                        readNoRepeatData.add(sugar.getQuantity());
                        readNoRepeatData.add(sugar.getPrice());
                        readNoRepeatData.add(sugar.getBatchNumber());
                        readNoRepeatData.add(sugar.getDateOfEntry());
                        readNoRepeatData.add(sugar.getDateOfOut());
                        readNoRepeatData.add(sugar.getRemarks());
                        result.add(readNoRepeatData);
                    }
                    if (str[i].substring(20, 24).equals("6A70")) {
                        SugarDao sugarDao = new SugarDao();
                        Sugar sugar = new Sugar();
                        sugar = sugarDao.queryUniqueObject("18");
                        Vector readNoRepeatData = new Vector();
                        readNoRepeatData.add(sugar.getCommodityId());
                        readNoRepeatData.add(sugar.getCommodityName());
                        readNoRepeatData.add(sugar.getManufacter());
                        readNoRepeatData.add(sugar.getPlace());
                        readNoRepeatData.add(sugar.getProductionDate());
                        readNoRepeatData.add(sugar.getWeight());
                        readNoRepeatData.add(sugar.getQuantity());
                        readNoRepeatData.add(sugar.getPrice());
                        readNoRepeatData.add(sugar.getBatchNumber());
                        readNoRepeatData.add(sugar.getDateOfEntry());
                        readNoRepeatData.add(sugar.getDateOfOut());
                        readNoRepeatData.add(sugar.getRemarks());
                        result.add(readNoRepeatData);
                    }
                    if (str[i].substring(20, 24).equals("0348")) {
                        SugarDao sugarDao = new SugarDao();
                        Sugar sugar = new Sugar();
                        sugar = sugarDao.queryUniqueObject("19");
                        Vector readNoRepeatData = new Vector();
                        readNoRepeatData.add(sugar.getCommodityId());
                        readNoRepeatData.add(sugar.getCommodityName());
                        readNoRepeatData.add(sugar.getManufacter());
                        readNoRepeatData.add(sugar.getPlace());
                        readNoRepeatData.add(sugar.getProductionDate());
                        readNoRepeatData.add(sugar.getWeight());
                        readNoRepeatData.add(sugar.getQuantity());
                        readNoRepeatData.add(sugar.getPrice());
                        readNoRepeatData.add(sugar.getBatchNumber());
                        readNoRepeatData.add(sugar.getDateOfEntry());
                        readNoRepeatData.add(sugar.getDateOfOut());
                        readNoRepeatData.add(sugar.getRemarks());
                        result.add(readNoRepeatData);
                    }
                    if (str[i].substring(20, 24).equals("87B8")) {
                        SugarDao sugarDao = new SugarDao();
                        Sugar sugar = new Sugar();
                        sugar = sugarDao.queryUniqueObject("20");
                        Vector readNoRepeatData = new Vector();
                        readNoRepeatData.add(sugar.getCommodityId());
                        readNoRepeatData.add(sugar.getCommodityName());
                        readNoRepeatData.add(sugar.getManufacter());
                        readNoRepeatData.add(sugar.getPlace());
                        readNoRepeatData.add(sugar.getProductionDate());
                        readNoRepeatData.add(sugar.getWeight());
                        readNoRepeatData.add(sugar.getQuantity());
                        readNoRepeatData.add(sugar.getPrice());
                        readNoRepeatData.add(sugar.getBatchNumber());
                        readNoRepeatData.add(sugar.getDateOfEntry());
                        readNoRepeatData.add(sugar.getDateOfOut());
                        readNoRepeatData.add(sugar.getRemarks());
                        result.add(readNoRepeatData);
                    }
                    if (str[i].substring(20, 24).equals("7C74")) {
                        SugarDao sugarDao = new SugarDao();
                        Sugar sugar = new Sugar();
                        sugar = sugarDao.queryUniqueObject("21");
                        Vector readNoRepeatData = new Vector();
                        readNoRepeatData.add(sugar.getCommodityId());
                        readNoRepeatData.add(sugar.getCommodityName());
                        readNoRepeatData.add(sugar.getManufacter());
                        readNoRepeatData.add(sugar.getPlace());
                        readNoRepeatData.add(sugar.getProductionDate());
                        readNoRepeatData.add(sugar.getWeight());
                        readNoRepeatData.add(sugar.getQuantity());
                        readNoRepeatData.add(sugar.getPrice());
                        readNoRepeatData.add(sugar.getBatchNumber());
                        readNoRepeatData.add(sugar.getDateOfEntry());
                        readNoRepeatData.add(sugar.getDateOfOut());
                        readNoRepeatData.add(sugar.getRemarks());
                        result.add(readNoRepeatData);
                    }
                    if (str[i].substring(20, 24).equals("063F")) {
                        SugarDao sugarDao = new SugarDao();
                        Sugar sugar = new Sugar();
                        sugar = sugarDao.queryUniqueObject("22");
                        Vector readNoRepeatData = new Vector();
                        readNoRepeatData.add(sugar.getCommodityId());
                        readNoRepeatData.add(sugar.getCommodityName());
                        readNoRepeatData.add(sugar.getManufacter());
                        readNoRepeatData.add(sugar.getPlace());
                        readNoRepeatData.add(sugar.getProductionDate());
                        readNoRepeatData.add(sugar.getWeight());
                        readNoRepeatData.add(sugar.getQuantity());
                        readNoRepeatData.add(sugar.getPrice());
                        readNoRepeatData.add(sugar.getBatchNumber());
                        readNoRepeatData.add(sugar.getDateOfEntry());
                        readNoRepeatData.add(sugar.getDateOfOut());
                        readNoRepeatData.add(sugar.getRemarks());
                        result.add(readNoRepeatData);
                    }
                    if (str[i].substring(20, 24).equals("5B07")) {
                        SugarDao sugarDao = new SugarDao();
                        Sugar sugar = new Sugar();
                        sugar = sugarDao.queryUniqueObject("23");
                        Vector readNoRepeatData = new Vector();
                        readNoRepeatData.add(sugar.getCommodityId());
                        readNoRepeatData.add(sugar.getCommodityName());
                        readNoRepeatData.add(sugar.getManufacter());
                        readNoRepeatData.add(sugar.getPlace());
                        readNoRepeatData.add(sugar.getProductionDate());
                        readNoRepeatData.add(sugar.getWeight());
                        readNoRepeatData.add(sugar.getQuantity());
                        readNoRepeatData.add(sugar.getPrice());
                        readNoRepeatData.add(sugar.getBatchNumber());
                        readNoRepeatData.add(sugar.getDateOfEntry());
                        readNoRepeatData.add(sugar.getDateOfOut());
                        readNoRepeatData.add(sugar.getRemarks());
                        result.add(readNoRepeatData);
                    }
                    if (str[i].substring(20, 24).equals("4163")) {
                        SugarDao sugarDao = new SugarDao();
                        Sugar sugar = new Sugar();
                        sugar = sugarDao.queryUniqueObject("24");
                        Vector readNoRepeatData = new Vector();
                        readNoRepeatData.add(sugar.getCommodityId());
                        readNoRepeatData.add(sugar.getCommodityName());
                        readNoRepeatData.add(sugar.getManufacter());
                        readNoRepeatData.add(sugar.getPlace());
                        readNoRepeatData.add(sugar.getProductionDate());
                        readNoRepeatData.add(sugar.getWeight());
                        readNoRepeatData.add(sugar.getQuantity());
                        readNoRepeatData.add(sugar.getPrice());
                        readNoRepeatData.add(sugar.getBatchNumber());
                        readNoRepeatData.add(sugar.getDateOfEntry());
                        readNoRepeatData.add(sugar.getDateOfOut());
                        readNoRepeatData.add(sugar.getRemarks());
                        result.add(readNoRepeatData);
                    }
                    if (str[i].substring(20, 24).equals("0DA1")) {
                        SugarDao sugarDao = new SugarDao();
                        Sugar sugar = new Sugar();
                        sugar = sugarDao.queryUniqueObject("25");
                        Vector readNoRepeatData = new Vector();
                        readNoRepeatData.add(sugar.getCommodityId());
                        readNoRepeatData.add(sugar.getCommodityName());
                        readNoRepeatData.add(sugar.getManufacter());
                        readNoRepeatData.add(sugar.getPlace());
                        readNoRepeatData.add(sugar.getProductionDate());
                        readNoRepeatData.add(sugar.getWeight());
                        readNoRepeatData.add(sugar.getQuantity());
                        readNoRepeatData.add(sugar.getPrice());
                        readNoRepeatData.add(sugar.getBatchNumber());
                        readNoRepeatData.add(sugar.getDateOfEntry());
                        readNoRepeatData.add(sugar.getDateOfOut());
                        readNoRepeatData.add(sugar.getRemarks());
                        result.add(readNoRepeatData);
                    }
                    if (str[i].substring(20, 24).equals("2F4A")) {
                        SugarDao sugarDao = new SugarDao();
                        Sugar sugar = new Sugar();
                        sugar = sugarDao.queryUniqueObject("26");
                        Vector readNoRepeatData = new Vector();
                        readNoRepeatData.add(sugar.getCommodityId());
                        readNoRepeatData.add(sugar.getCommodityName());
                        readNoRepeatData.add(sugar.getManufacter());
                        readNoRepeatData.add(sugar.getPlace());
                        readNoRepeatData.add(sugar.getProductionDate());
                        readNoRepeatData.add(sugar.getWeight());
                        readNoRepeatData.add(sugar.getQuantity());
                        readNoRepeatData.add(sugar.getPrice());
                        readNoRepeatData.add(sugar.getBatchNumber());
                        readNoRepeatData.add(sugar.getDateOfEntry());
                        readNoRepeatData.add(sugar.getDateOfOut());
                        readNoRepeatData.add(sugar.getRemarks());
                        result.add(readNoRepeatData);
                    }
                    if (str[i].substring(20, 24).equals("7C78")) {
                        SugarDao sugarDao = new SugarDao();
                        Sugar sugar = new Sugar();
                        sugar = sugarDao.queryUniqueObject("27");
                        Vector readNoRepeatData = new Vector();
                        readNoRepeatData.add(sugar.getCommodityId());
                        readNoRepeatData.add(sugar.getCommodityName());
                        readNoRepeatData.add(sugar.getManufacter());
                        readNoRepeatData.add(sugar.getPlace());
                        readNoRepeatData.add(sugar.getProductionDate());
                        readNoRepeatData.add(sugar.getWeight());
                        readNoRepeatData.add(sugar.getQuantity());
                        readNoRepeatData.add(sugar.getPrice());
                        readNoRepeatData.add(sugar.getBatchNumber());
                        readNoRepeatData.add(sugar.getDateOfEntry());
                        readNoRepeatData.add(sugar.getDateOfOut());
                        readNoRepeatData.add(sugar.getRemarks());
                        result.add(readNoRepeatData);
                    }
                    if (str[i].substring(20, 24).equals("58DE")) {
                        SugarDao sugarDao = new SugarDao();
                        Sugar sugar = new Sugar();
                        sugar = sugarDao.queryUniqueObject("28");
                        Vector readNoRepeatData = new Vector();
                        readNoRepeatData.add(sugar.getCommodityId());
                        readNoRepeatData.add(sugar.getCommodityName());
                        readNoRepeatData.add(sugar.getManufacter());
                        readNoRepeatData.add(sugar.getPlace());
                        readNoRepeatData.add(sugar.getProductionDate());
                        readNoRepeatData.add(sugar.getWeight());
                        readNoRepeatData.add(sugar.getQuantity());
                        readNoRepeatData.add(sugar.getPrice());
                        readNoRepeatData.add(sugar.getBatchNumber());
                        readNoRepeatData.add(sugar.getDateOfEntry());
                        readNoRepeatData.add(sugar.getDateOfOut());
                        readNoRepeatData.add(sugar.getRemarks());
                        result.add(readNoRepeatData);
                    }
                    if (str[i].substring(20, 24).equals("14EA")) {
                        SugarDao sugarDao = new SugarDao();
                        Sugar sugar = new Sugar();
                        sugar = sugarDao.queryUniqueObject("29");
                        Vector readNoRepeatData = new Vector();
                        readNoRepeatData.add(sugar.getCommodityId());
                        readNoRepeatData.add(sugar.getCommodityName());
                        readNoRepeatData.add(sugar.getManufacter());
                        readNoRepeatData.add(sugar.getPlace());
                        readNoRepeatData.add(sugar.getProductionDate());
                        readNoRepeatData.add(sugar.getWeight());
                        readNoRepeatData.add(sugar.getQuantity());
                        readNoRepeatData.add(sugar.getPrice());
                        readNoRepeatData.add(sugar.getBatchNumber());
                        readNoRepeatData.add(sugar.getDateOfEntry());
                        readNoRepeatData.add(sugar.getDateOfOut());
                        readNoRepeatData.add(sugar.getRemarks());
                        result.add(readNoRepeatData);
                    }
                    if (str[i].substring(20, 24).equals("034C")) {
                        SugarDao sugarDao = new SugarDao();
                        Sugar sugar = new Sugar();
                        sugar = sugarDao.queryUniqueObject("30");
                        Vector readNoRepeatData = new Vector();
                        readNoRepeatData.add(sugar.getCommodityId());
                        readNoRepeatData.add(sugar.getCommodityName());
                        readNoRepeatData.add(sugar.getManufacter());
                        readNoRepeatData.add(sugar.getPlace());
                        readNoRepeatData.add(sugar.getProductionDate());
                        readNoRepeatData.add(sugar.getWeight());
                        readNoRepeatData.add(sugar.getQuantity());
                        readNoRepeatData.add(sugar.getPrice());
                        readNoRepeatData.add(sugar.getBatchNumber());
                        readNoRepeatData.add(sugar.getDateOfEntry());
                        readNoRepeatData.add(sugar.getDateOfOut());
                        readNoRepeatData.add(sugar.getRemarks());
                        result.add(readNoRepeatData);
                    }
                    if (str[i].substring(20, 24).equals("1B66")) {
                        SugarDao sugarDao = new SugarDao();
                        Sugar sugar = new Sugar();
                        sugar = sugarDao.queryUniqueObject("31");
                        Vector readNoRepeatData = new Vector();
                        readNoRepeatData.add(sugar.getCommodityId());
                        readNoRepeatData.add(sugar.getCommodityName());
                        readNoRepeatData.add(sugar.getManufacter());
                        readNoRepeatData.add(sugar.getPlace());
                        readNoRepeatData.add(sugar.getProductionDate());
                        readNoRepeatData.add(sugar.getWeight());
                        readNoRepeatData.add(sugar.getQuantity());
                        readNoRepeatData.add(sugar.getPrice());
                        readNoRepeatData.add(sugar.getBatchNumber());
                        readNoRepeatData.add(sugar.getDateOfEntry());
                        readNoRepeatData.add(sugar.getDateOfOut());
                        readNoRepeatData.add(sugar.getRemarks());
                        result.add(readNoRepeatData);
                    }
                    if (str[i].substring(20, 24).equals("75B8")) {
                        SugarDao sugarDao = new SugarDao();
                        Sugar sugar = new Sugar();
                        sugar = sugarDao.queryUniqueObject("32");
                        Vector readNoRepeatData = new Vector();
                        readNoRepeatData.add(sugar.getCommodityId());
                        readNoRepeatData.add(sugar.getCommodityName());
                        readNoRepeatData.add(sugar.getManufacter());
                        readNoRepeatData.add(sugar.getPlace());
                        readNoRepeatData.add(sugar.getProductionDate());
                        readNoRepeatData.add(sugar.getWeight());
                        readNoRepeatData.add(sugar.getQuantity());
                        readNoRepeatData.add(sugar.getPrice());
                        readNoRepeatData.add(sugar.getBatchNumber());
                        readNoRepeatData.add(sugar.getDateOfEntry());
                        readNoRepeatData.add(sugar.getDateOfOut());
                        readNoRepeatData.add(sugar.getRemarks());
                        result.add(readNoRepeatData);
                    }
                    if (str[i].substring(20, 24).equals("47A4")) {
                        SugarDao sugarDao = new SugarDao();
                        Sugar sugar = new Sugar();
                        sugar = sugarDao.queryUniqueObject("33");
                        Vector readNoRepeatData = new Vector();
                        readNoRepeatData.add(sugar.getCommodityId());
                        readNoRepeatData.add(sugar.getCommodityName());
                        readNoRepeatData.add(sugar.getManufacter());
                        readNoRepeatData.add(sugar.getPlace());
                        readNoRepeatData.add(sugar.getProductionDate());
                        readNoRepeatData.add(sugar.getWeight());
                        readNoRepeatData.add(sugar.getQuantity());
                        readNoRepeatData.add(sugar.getPrice());
                        readNoRepeatData.add(sugar.getBatchNumber());
                        readNoRepeatData.add(sugar.getDateOfEntry());
                        readNoRepeatData.add(sugar.getDateOfOut());
                        readNoRepeatData.add(sugar.getRemarks());
                        result.add(readNoRepeatData);
                    }
                    if (str[i].substring(20, 24).equals("2994")) {
                        SugarDao sugarDao = new SugarDao();
                        Sugar sugar = new Sugar();
                        sugar = sugarDao.queryUniqueObject("34");
                        Vector readNoRepeatData = new Vector();
                        readNoRepeatData.add(sugar.getCommodityId());
                        readNoRepeatData.add(sugar.getCommodityName());
                        readNoRepeatData.add(sugar.getManufacter());
                        readNoRepeatData.add(sugar.getPlace());
                        readNoRepeatData.add(sugar.getProductionDate());
                        readNoRepeatData.add(sugar.getWeight());
                        readNoRepeatData.add(sugar.getQuantity());
                        readNoRepeatData.add(sugar.getPrice());
                        readNoRepeatData.add(sugar.getBatchNumber());
                        readNoRepeatData.add(sugar.getDateOfEntry());
                        readNoRepeatData.add(sugar.getDateOfOut());
                        readNoRepeatData.add(sugar.getRemarks());
                        result.add(readNoRepeatData);
                    }
                    if (str[i].substring(20, 24).equals("89F4")) {
                        SugarDao sugarDao = new SugarDao();
                        Sugar sugar = new Sugar();
                        sugar = sugarDao.queryUniqueObject("35");
                        Vector readNoRepeatData = new Vector();
                        readNoRepeatData.add(sugar.getCommodityId());
                        readNoRepeatData.add(sugar.getCommodityName());
                        readNoRepeatData.add(sugar.getManufacter());
                        readNoRepeatData.add(sugar.getPlace());
                        readNoRepeatData.add(sugar.getProductionDate());
                        readNoRepeatData.add(sugar.getWeight());
                        readNoRepeatData.add(sugar.getQuantity());
                        readNoRepeatData.add(sugar.getPrice());
                        readNoRepeatData.add(sugar.getBatchNumber());
                        readNoRepeatData.add(sugar.getDateOfEntry());
                        readNoRepeatData.add(sugar.getDateOfOut());
                        readNoRepeatData.add(sugar.getRemarks());
                        result.add(readNoRepeatData);
                    }
                    if (str[i].substring(20, 24).equals("2B7A")) {
                        SugarDao sugarDao = new SugarDao();
                        Sugar sugar = new Sugar();
                        sugar = sugarDao.queryUniqueObject("36");
                        Vector readNoRepeatData = new Vector();
                        readNoRepeatData.add(sugar.getCommodityId());
                        readNoRepeatData.add(sugar.getCommodityName());
                        readNoRepeatData.add(sugar.getManufacter());
                        readNoRepeatData.add(sugar.getPlace());
                        readNoRepeatData.add(sugar.getProductionDate());
                        readNoRepeatData.add(sugar.getWeight());
                        readNoRepeatData.add(sugar.getQuantity());
                        readNoRepeatData.add(sugar.getPrice());
                        readNoRepeatData.add(sugar.getBatchNumber());
                        readNoRepeatData.add(sugar.getDateOfEntry());
                        readNoRepeatData.add(sugar.getDateOfOut());
                        readNoRepeatData.add(sugar.getRemarks());
                        result.add(readNoRepeatData);
                    }
                    if (str[i].substring(20, 24).equals("524E")) {
                        SugarDao sugarDao = new SugarDao();
                        Sugar sugar = new Sugar();
                        sugar = sugarDao.queryUniqueObject("37");
                        Vector readNoRepeatData = new Vector();
                        readNoRepeatData.add(sugar.getCommodityId());
                        readNoRepeatData.add(sugar.getCommodityName());
                        readNoRepeatData.add(sugar.getManufacter());
                        readNoRepeatData.add(sugar.getPlace());
                        readNoRepeatData.add(sugar.getProductionDate());
                        readNoRepeatData.add(sugar.getWeight());
                        readNoRepeatData.add(sugar.getQuantity());
                        readNoRepeatData.add(sugar.getPrice());
                        readNoRepeatData.add(sugar.getBatchNumber());
                        readNoRepeatData.add(sugar.getDateOfEntry());
                        readNoRepeatData.add(sugar.getDateOfOut());
                        readNoRepeatData.add(sugar.getRemarks());
                        result.add(readNoRepeatData);
                    }
                    if (str[i].substring(20, 24).equals("224A")) {
                        SugarDao sugarDao = new SugarDao();
                        Sugar sugar = new Sugar();
                        sugar = sugarDao.queryUniqueObject("38");
                        Vector readNoRepeatData = new Vector();
                        readNoRepeatData.add(sugar.getCommodityId());
                        readNoRepeatData.add(sugar.getCommodityName());
                        readNoRepeatData.add(sugar.getManufacter());
                        readNoRepeatData.add(sugar.getPlace());
                        readNoRepeatData.add(sugar.getProductionDate());
                        readNoRepeatData.add(sugar.getWeight());
                        readNoRepeatData.add(sugar.getQuantity());
                        readNoRepeatData.add(sugar.getPrice());
                        readNoRepeatData.add(sugar.getBatchNumber());
                        readNoRepeatData.add(sugar.getDateOfEntry());
                        readNoRepeatData.add(sugar.getDateOfOut());
                        readNoRepeatData.add(sugar.getRemarks());
                        result.add(readNoRepeatData);
                    }
                    if (str[i].substring(20, 24).equals("1D0C")) {
                        SugarDao sugarDao = new SugarDao();
                        Sugar sugar = new Sugar();
                        sugar = sugarDao.queryUniqueObject("39");
                        Vector readNoRepeatData = new Vector();
                        readNoRepeatData.add(sugar.getCommodityId());
                        readNoRepeatData.add(sugar.getCommodityName());
                        readNoRepeatData.add(sugar.getManufacter());
                        readNoRepeatData.add(sugar.getPlace());
                        readNoRepeatData.add(sugar.getProductionDate());
                        readNoRepeatData.add(sugar.getWeight());
                        readNoRepeatData.add(sugar.getQuantity());
                        readNoRepeatData.add(sugar.getPrice());
                        readNoRepeatData.add(sugar.getBatchNumber());
                        readNoRepeatData.add(sugar.getDateOfEntry());
                        readNoRepeatData.add(sugar.getDateOfOut());
                        readNoRepeatData.add(sugar.getRemarks());
                        result.add(readNoRepeatData);
                    }
                    if (str[i].substring(20, 24).equals("0C4F")) {
                        SugarDao sugarDao = new SugarDao();
                        Sugar sugar = new Sugar();
                        sugar = sugarDao.queryUniqueObject("40");
                        Vector readNoRepeatData = new Vector();
                        readNoRepeatData.add(sugar.getCommodityId());
                        readNoRepeatData.add(sugar.getCommodityName());
                        readNoRepeatData.add(sugar.getManufacter());
                        readNoRepeatData.add(sugar.getPlace());
                        readNoRepeatData.add(sugar.getProductionDate());
                        readNoRepeatData.add(sugar.getWeight());
                        readNoRepeatData.add(sugar.getQuantity());
                        readNoRepeatData.add(sugar.getPrice());
                        readNoRepeatData.add(sugar.getBatchNumber());
                        readNoRepeatData.add(sugar.getDateOfEntry());
                        readNoRepeatData.add(sugar.getDateOfOut());
                        readNoRepeatData.add(sugar.getRemarks());
                        result.add(readNoRepeatData);
                    }
                    if (str[i].substring(20, 24).equals("027F")) {
                        SugarDao sugarDao = new SugarDao();
                        Sugar sugar = new Sugar();
                        sugar = sugarDao.queryUniqueObject("41");
                        Vector readNoRepeatData = new Vector();
                        readNoRepeatData.add(sugar.getCommodityId());
                        readNoRepeatData.add(sugar.getCommodityName());
                        readNoRepeatData.add(sugar.getManufacter());
                        readNoRepeatData.add(sugar.getPlace());
                        readNoRepeatData.add(sugar.getProductionDate());
                        readNoRepeatData.add(sugar.getWeight());
                        readNoRepeatData.add(sugar.getQuantity());
                        readNoRepeatData.add(sugar.getPrice());
                        readNoRepeatData.add(sugar.getBatchNumber());
                        readNoRepeatData.add(sugar.getDateOfEntry());
                        readNoRepeatData.add(sugar.getDateOfOut());
                        readNoRepeatData.add(sugar.getRemarks());
                        result.add(readNoRepeatData);
                    }
                    if (str[i].substring(20, 24).equals("09AC")) {
                        SugarDao sugarDao = new SugarDao();
                        Sugar sugar = new Sugar();
                        sugar = sugarDao.queryUniqueObject("42");
                        Vector readNoRepeatData = new Vector();
                        readNoRepeatData.add(sugar.getCommodityId());
                        readNoRepeatData.add(sugar.getCommodityName());
                        readNoRepeatData.add(sugar.getManufacter());
                        readNoRepeatData.add(sugar.getPlace());
                        readNoRepeatData.add(sugar.getProductionDate());
                        readNoRepeatData.add(sugar.getWeight());
                        readNoRepeatData.add(sugar.getQuantity());
                        readNoRepeatData.add(sugar.getPrice());
                        readNoRepeatData.add(sugar.getBatchNumber());
                        readNoRepeatData.add(sugar.getDateOfEntry());
                        readNoRepeatData.add(sugar.getDateOfOut());
                        readNoRepeatData.add(sugar.getRemarks());
                        result.add(readNoRepeatData);
                    }
                    if (str[i].substring(20, 24).equals("087F")) {
                        SugarDao sugarDao = new SugarDao();
                        Sugar sugar = new Sugar();
                        sugar = sugarDao.queryUniqueObject("43");
                        Vector readNoRepeatData = new Vector();
                        readNoRepeatData.add(sugar.getCommodityId());
                        readNoRepeatData.add(sugar.getCommodityName());
                        readNoRepeatData.add(sugar.getManufacter());
                        readNoRepeatData.add(sugar.getPlace());
                        readNoRepeatData.add(sugar.getProductionDate());
                        readNoRepeatData.add(sugar.getWeight());
                        readNoRepeatData.add(sugar.getQuantity());
                        readNoRepeatData.add(sugar.getPrice());
                        readNoRepeatData.add(sugar.getBatchNumber());
                        readNoRepeatData.add(sugar.getDateOfEntry());
                        readNoRepeatData.add(sugar.getDateOfOut());
                        readNoRepeatData.add(sugar.getRemarks());
                        result.add(readNoRepeatData);
                    }
                    if (str[i].substring(20, 24).equals("1362")) {
                        SugarDao sugarDao = new SugarDao();
                        Sugar sugar = new Sugar();
                        sugar = sugarDao.queryUniqueObject("44");
                        Vector readNoRepeatData = new Vector();
                        readNoRepeatData.add(sugar.getCommodityId());
                        readNoRepeatData.add(sugar.getCommodityName());
                        readNoRepeatData.add(sugar.getManufacter());
                        readNoRepeatData.add(sugar.getPlace());
                        readNoRepeatData.add(sugar.getProductionDate());
                        readNoRepeatData.add(sugar.getWeight());
                        readNoRepeatData.add(sugar.getQuantity());
                        readNoRepeatData.add(sugar.getPrice());
                        readNoRepeatData.add(sugar.getBatchNumber());
                        readNoRepeatData.add(sugar.getDateOfEntry());
                        readNoRepeatData.add(sugar.getDateOfOut());
                        readNoRepeatData.add(sugar.getRemarks());
                        result.add(readNoRepeatData);
                    }
                    if (str[i].substring(20, 24).equals("2095")) {
                        SugarDao sugarDao = new SugarDao();
                        Sugar sugar = new Sugar();
                        sugar = sugarDao.queryUniqueObject("45");
                        Vector readNoRepeatData = new Vector();
                        readNoRepeatData.add(sugar.getCommodityId());
                        readNoRepeatData.add(sugar.getCommodityName());
                        readNoRepeatData.add(sugar.getManufacter());
                        readNoRepeatData.add(sugar.getPlace());
                        readNoRepeatData.add(sugar.getProductionDate());
                        readNoRepeatData.add(sugar.getWeight());
                        readNoRepeatData.add(sugar.getQuantity());
                        readNoRepeatData.add(sugar.getPrice());
                        readNoRepeatData.add(sugar.getBatchNumber());
                        readNoRepeatData.add(sugar.getDateOfEntry());
                        readNoRepeatData.add(sugar.getDateOfOut());
                        readNoRepeatData.add(sugar.getRemarks());
                        result.add(readNoRepeatData);
                    }
                    if (str[i].substring(20, 24).equals("3B3A")) {
                        SugarDao sugarDao = new SugarDao();
                        Sugar sugar = new Sugar();
                        sugar = sugarDao.queryUniqueObject("46");
                        Vector readNoRepeatData = new Vector();
                        readNoRepeatData.add(sugar.getCommodityId());
                        readNoRepeatData.add(sugar.getCommodityName());
                        readNoRepeatData.add(sugar.getManufacter());
                        readNoRepeatData.add(sugar.getPlace());
                        readNoRepeatData.add(sugar.getProductionDate());
                        readNoRepeatData.add(sugar.getWeight());
                        readNoRepeatData.add(sugar.getQuantity());
                        readNoRepeatData.add(sugar.getPrice());
                        readNoRepeatData.add(sugar.getBatchNumber());
                        readNoRepeatData.add(sugar.getDateOfEntry());
                        readNoRepeatData.add(sugar.getDateOfOut());
                        readNoRepeatData.add(sugar.getRemarks());
                        result.add(readNoRepeatData);
                    }
                    if (str[i].substring(20, 24).equals("3931")) {
                        SugarDao sugarDao = new SugarDao();
                        Sugar sugar = new Sugar();
                        sugar = sugarDao.queryUniqueObject("47");
                        Vector readNoRepeatData = new Vector();
                        readNoRepeatData.add(sugar.getCommodityId());
                        readNoRepeatData.add(sugar.getCommodityName());
                        readNoRepeatData.add(sugar.getManufacter());
                        readNoRepeatData.add(sugar.getPlace());
                        readNoRepeatData.add(sugar.getProductionDate());
                        readNoRepeatData.add(sugar.getWeight());
                        readNoRepeatData.add(sugar.getQuantity());
                        readNoRepeatData.add(sugar.getPrice());
                        readNoRepeatData.add(sugar.getBatchNumber());
                        readNoRepeatData.add(sugar.getDateOfEntry());
                        readNoRepeatData.add(sugar.getDateOfOut());
                        readNoRepeatData.add(sugar.getRemarks());
                        result.add(readNoRepeatData);
                    }
                    if (str[i].substring(20, 24).equals("3330")) {
                        SugarDao sugarDao = new SugarDao();
                        Sugar sugar = new Sugar();
                        sugar = sugarDao.queryUniqueObject("48");
                        Vector readNoRepeatData = new Vector();
                        readNoRepeatData.add(sugar.getCommodityId());
                        readNoRepeatData.add(sugar.getCommodityName());
                        readNoRepeatData.add(sugar.getManufacter());
                        readNoRepeatData.add(sugar.getPlace());
                        readNoRepeatData.add(sugar.getProductionDate());
                        readNoRepeatData.add(sugar.getWeight());
                        readNoRepeatData.add(sugar.getQuantity());
                        readNoRepeatData.add(sugar.getPrice());
                        readNoRepeatData.add(sugar.getBatchNumber());
                        readNoRepeatData.add(sugar.getDateOfEntry());
                        readNoRepeatData.add(sugar.getDateOfOut());
                        readNoRepeatData.add(sugar.getRemarks());
                        result.add(readNoRepeatData);
                    }
                    if (str[i].substring(20, 24).equals("27B0")) {
                        SugarDao sugarDao = new SugarDao();
                        Sugar sugar = new Sugar();
                        sugar = sugarDao.queryUniqueObject("49");
                        Vector readNoRepeatData = new Vector();
                        readNoRepeatData.add(sugar.getCommodityId());
                        readNoRepeatData.add(sugar.getCommodityName());
                        readNoRepeatData.add(sugar.getManufacter());
                        readNoRepeatData.add(sugar.getPlace());
                        readNoRepeatData.add(sugar.getProductionDate());
                        readNoRepeatData.add(sugar.getWeight());
                        readNoRepeatData.add(sugar.getQuantity());
                        readNoRepeatData.add(sugar.getPrice());
                        readNoRepeatData.add(sugar.getBatchNumber());
                        readNoRepeatData.add(sugar.getDateOfEntry());
                        readNoRepeatData.add(sugar.getDateOfOut());
                        readNoRepeatData.add(sugar.getRemarks());
                        result.add(readNoRepeatData);
                    }
                    if (str[i].substring(20, 24).equals("2D5E")) {
                        SugarDao sugarDao = new SugarDao();
                        Sugar sugar = new Sugar();
                        sugar = sugarDao.queryUniqueObject("50");
                        Vector readNoRepeatData = new Vector();
                        readNoRepeatData.add(sugar.getCommodityId());
                        readNoRepeatData.add(sugar.getCommodityName());
                        readNoRepeatData.add(sugar.getManufacter());
                        readNoRepeatData.add(sugar.getPlace());
                        readNoRepeatData.add(sugar.getProductionDate());
                        readNoRepeatData.add(sugar.getWeight());
                        readNoRepeatData.add(sugar.getQuantity());
                        readNoRepeatData.add(sugar.getPrice());
                        readNoRepeatData.add(sugar.getBatchNumber());
                        readNoRepeatData.add(sugar.getDateOfEntry());
                        readNoRepeatData.add(sugar.getDateOfOut());
                        readNoRepeatData.add(sugar.getRemarks());
                        result.add(readNoRepeatData);
                    }
                    TableModel model = new DefaultTableModel(result, colNames) {
                        public Class<?> getColumnClass(int column) {
//                            Class returnValue; 
//                            if (getRowCount()>0) 
//                               { 
//                                   returnValue = getValueAt(0,column).getClass(); 
//                                } 
//                                else{ 
//                                    returnValue = int.class; 
//                                } 
                            return Integer.class;
                        }
                    };

                    jTable1.setModel(model);
                    RowSorter sorter = new TableRowSorter(model);
                    jTable1.setRowSorter(sorter);

//                        jTable1.setAutoCreateRowSorter (true);
                    jTable1.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);

                    jTable1.getColumnModel()
                            .getColumn(0).setPreferredWidth(60);
                    jTable1.getColumnModel()
                            .getColumn(1).setPreferredWidth(60);
                    jTable1.getColumnModel()
                            .getColumn(2).setPreferredWidth(90);
                    jTable1.getColumnModel()
                            .getColumn(3).setPreferredWidth(60);
                    jTable1.getColumnModel()
                            .getColumn(4).setPreferredWidth(80);
                    jTable1.getColumnModel()
                            .getColumn(5).setPreferredWidth(60);
                    jTable1.getColumnModel()
                            .getColumn(6).setPreferredWidth(60);
                    jTable1.getColumnModel()
                            .getColumn(7).setPreferredWidth(60);
                    jTable1.getColumnModel()
                            .getColumn(8).setPreferredWidth(90);
                    jTable1.getColumnModel()
                            .getColumn(9).setPreferredWidth(80);
                    jTable1.getColumnModel()
                            .getColumn(10).setPreferredWidth(80);
                    jTable1.getColumnModel()
                            .getColumn(11).setPreferredWidth(60);
                    
                    float bestRP = 0;
        float bestRW = 0;
        float bestWP = 0;
        float bestWW = 0;
        float WP = 0;
        float WW = 0;
        float YP = 0;
        float YW = 0;

        for (int j = 0; j < result.size(); j++) {
            Vector vector = new Vector();
            vector = (Vector) result.get(j);

//           int lengthP=vector.get(7).toString().length();
//           int lengthW=vector.get(5).toString().length();
//           int length=vector.get(6).toString().length();
            if (vector.get(1).toString().equals("特级红糖")) {
                bestRP += Float.parseFloat(vector.get(7).toString()) * Integer.parseInt(vector.get(6).toString());
                bestRW += Float.parseFloat(vector.get(5).toString()) * Integer.parseInt(vector.get(6).toString()) / 1000.0;
            }
            if (vector.get(1).toString().equals("特级白糖")) {
                bestWP += Float.parseFloat(vector.get(7).toString()) * Integer.parseInt(vector.get(6).toString());
                bestWW += Float.parseFloat(vector.get(5).toString()) * Integer.parseInt(vector.get(6).toString()) / 1000.0;
            }
            if (vector.get(1).toString().equals("白砂糖")) {
                WP += Float.parseFloat(vector.get(7).toString()) * Integer.parseInt(vector.get(6).toString());
                WW += Float.parseFloat(vector.get(5).toString()) * Integer.parseInt(vector.get(6).toString()) / 1000.0;
            }
            if (vector.get(1).toString().equals("黄糖")) {
                YP += Float.parseFloat(vector.get(7).toString()) * Integer.parseInt(vector.get(6).toString());
                YW += Float.parseFloat(vector.get(5).toString()) * Integer.parseInt(vector.get(6).toString()) / 1000.0;
            }
        }

        jTextField3_WeightBR.setText(String.valueOf(bestRW));
        jTextField4_PriceBR.setText(String.valueOf(bestRP));
        jTextField5_WeightBW.setText(String.valueOf(bestWW));
        jTextField6_PriceBW.setText(String.valueOf(bestWP));
        jTextField7_WeightW.setText(String.valueOf(WW));
        jTextField8_PriceW.setText(String.valueOf(WP));
        jTextField9_WeightY.setText(String.valueOf(YW));
        jTextField10_PriceW.setText(String.valueOf(YP));
        jTextField11_totalWeight.setText(String.valueOf(bestRW + bestWW + WW + YW) + " Kg");
        jTextField12_totalPrice.setText(String.valueOf(bestRP + bestWP + WP + YP) + " 元");
        jPanel8_input.setVisible(true);
                    jPanel9_select.setVisible(false);
                    jPanel10_date.setVisible(false);
                    jPanel11.setVisible(true);
                    jPanel7.setVisible(true);
                    jPanel8_car_condition.setVisible(false);
                    jPanel8_car.setVisible(false);

                }
             
                if (str[i].substring(0, 2).equals("15")) {
                    if (str[i].substring(20, 24).equals("6CA8")) {
                        ParkingDao parkingDao = new ParkingDao();
                        Parking parking = new Parking();
                        parking = parkingDao.queryUniqueObject("1");
                        Vector readNoRepeatData = new Vector();
                        readNoRepeatData.add(parking.getSequenceId());
                        readNoRepeatData.add(parking.getPlateNumber());
                        readNoRepeatData.add(parking.getOwnerName());
                        readNoRepeatData.add(parking.getIdCard());
                    
                        readNoRepeatData.add(parking.getTelephone());
                        readNoRepeatData.add(parking.getEntrance());
                        readNoRepeatData.add(parking.getExit());
                        readNoRepeatData.add(parking.getConsumption());
                        
                        readNoRepeatData.add(parking.getBalanceOfCard());
                        readNoRepeatData.add(parking.getRemarks());
                        result.add(readNoRepeatData);
                    }
                    if (str[i].substring(20, 24).equals("6CA4")) {
                        ParkingDao parkingDao = new ParkingDao();
                        Parking parking = new Parking();
                        parking = parkingDao.queryUniqueObject("2");
                        Vector readNoRepeatData = new Vector();
                        readNoRepeatData.add(parking.getSequenceId());
                        readNoRepeatData.add(parking.getPlateNumber());
                        readNoRepeatData.add(parking.getOwnerName());
                        readNoRepeatData.add(parking.getIdCard());
                    
                        readNoRepeatData.add(parking.getTelephone());
                        readNoRepeatData.add(parking.getEntrance());
                        readNoRepeatData.add(parking.getExit());
                        readNoRepeatData.add(parking.getConsumption());
                        
                        readNoRepeatData.add(parking.getBalanceOfCard());
                        readNoRepeatData.add(parking.getRemarks());
                        result.add(readNoRepeatData);
                    }
                    if (str[i].substring(20, 24).equals("2095")) {
                        ParkingDao parkingDao = new ParkingDao();
                        Parking parking = new Parking();
                        parking = parkingDao.queryUniqueObject("3");
                        Vector readNoRepeatData = new Vector();
                        readNoRepeatData.add(parking.getSequenceId());
                        readNoRepeatData.add(parking.getPlateNumber());
                        readNoRepeatData.add(parking.getOwnerName());
                        readNoRepeatData.add(parking.getIdCard());
                    
                        readNoRepeatData.add(parking.getTelephone());
                        readNoRepeatData.add(parking.getEntrance());
                        readNoRepeatData.add(parking.getExit());
                        readNoRepeatData.add(parking.getConsumption());
                        
                        readNoRepeatData.add(parking.getBalanceOfCard());
                        readNoRepeatData.add(parking.getRemarks());
                        result.add(readNoRepeatData);
                    }
                    if (str[i].substring(20, 24).equals("9001")) {
                        ParkingDao parkingDao = new ParkingDao();
                        Parking parking = new Parking();
                        parking = parkingDao.queryUniqueObject("4");
                        Vector readNoRepeatData = new Vector();
                        readNoRepeatData.add(parking.getSequenceId());
                        readNoRepeatData.add(parking.getPlateNumber());
                        readNoRepeatData.add(parking.getOwnerName());
                        readNoRepeatData.add(parking.getIdCard());
                    
                        readNoRepeatData.add(parking.getTelephone());
                        readNoRepeatData.add(parking.getEntrance());
                        readNoRepeatData.add(parking.getExit());
                        readNoRepeatData.add(parking.getConsumption());
                        
                        readNoRepeatData.add(parking.getBalanceOfCard());
                        readNoRepeatData.add(parking.getRemarks());
                        result.add(readNoRepeatData);
                    }
                    if (str[i].substring(20, 24).equals("75B0")) {
                        ParkingDao parkingDao = new ParkingDao();
                        Parking parking = new Parking();
                        parking = parkingDao.queryUniqueObject("5");
                        Vector readNoRepeatData = new Vector();
                        readNoRepeatData.add(parking.getSequenceId());
                        readNoRepeatData.add(parking.getPlateNumber());
                        readNoRepeatData.add(parking.getOwnerName());
                        readNoRepeatData.add(parking.getIdCard());
                    
                        readNoRepeatData.add(parking.getTelephone());
                        readNoRepeatData.add(parking.getEntrance());
                        readNoRepeatData.add(parking.getExit());
                        readNoRepeatData.add(parking.getConsumption());
                        
                        readNoRepeatData.add(parking.getBalanceOfCard());
                        readNoRepeatData.add(parking.getRemarks());
                        result.add(readNoRepeatData);
                    }
                    Vector colNames1 = new Vector();
                    colNames1.add("编号");
                    colNames1.add("车牌号");
                    colNames1.add("车主姓名");
                    colNames1.add("身份证号");
                    colNames1.add("手机号码");
                    colNames1.add("进站口");
                    colNames1.add("离站口");
                    colNames1.add("本次消费");
                    colNames1.add("卡内余额");
                    colNames1.add("备注");
                    TableModel model = new DefaultTableModel(result, colNames1) {
                        public Class<?> getColumnClass(int column) {
//                            Class returnValue; 
//                            if (getRowCount()>0) 
//                               { 
//                                   returnValue = getValueAt(0,column).getClass(); 
//                                } 
//                                else{ 
//                                    returnValue = int.class; 
//                                } 
                            return Integer.class;
                        }
                    };

                    jTable1.setModel(model);
                    RowSorter sorter = new TableRowSorter(model);
                    jTable1.setRowSorter(sorter);

//                        jTable1.setAutoCreateRowSorter (true);
                    jTable1.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);

                    jTable1.getColumnModel()
                            .getColumn(0).setPreferredWidth(50);
                    jTable1.getColumnModel()
                            .getColumn(1).setPreferredWidth(70);
                    jTable1.getColumnModel()
                            .getColumn(2).setPreferredWidth(60);
                    jTable1.getColumnModel()
                            .getColumn(3).setPreferredWidth(140);
                    jTable1.getColumnModel()
                            .getColumn(4).setPreferredWidth(90);
                    jTable1.getColumnModel()
                            .getColumn(5).setPreferredWidth(60);
                    jTable1.getColumnModel()
                            .getColumn(6).setPreferredWidth(60);
                    jTable1.getColumnModel()
                            .getColumn(7).setPreferredWidth(60);
                    jTable1.getColumnModel()
                            .getColumn(8).setPreferredWidth(60);
                    jTable1.getColumnModel()
                            .getColumn(9).setPreferredWidth(60);
                   
                    jPanel8_input.setVisible(false);
                    jPanel9_select.setVisible(false);
                    jPanel10_date.setVisible(false);
                    jPanel11.setVisible(false);
                    jPanel7.setVisible(false);
                    jPanel8_car_condition.setVisible(true);
                    jPanel8_car.setVisible(true);
            }
            }

        }
        jTextField3_readCount.setText(Integer.toString(strLength));
        jTextField2_labelCount.setText(Integer.toString(result.size()));
        }

// TODO add your handling code here:
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SugarSystemGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SugarSystemGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SugarSystemGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SugarSystemGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SugarSystemGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton1_readAnt;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton7_readOnce;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JCheckBox jCheckBox1_antNum1;
    private javax.swing.JCheckBox jCheckBox2_antNum2;
    private javax.swing.JCheckBox jCheckBox3_antNum3;
    private javax.swing.JCheckBox jCheckBox4_antNum4;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox1_antNum1Time;
    private javax.swing.JComboBox<String> jComboBox1_selectCondition;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JComboBox<String> jComboBox3_antNum1Power;
    private javax.swing.JComboBox<String> jComboBox3_selectMessage;
    private javax.swing.JComboBox<String> jComboBox4_antNum2Time;
    private javax.swing.JComboBox<String> jComboBox4_startYear;
    private javax.swing.JComboBox<String> jComboBox5_antNum2Power;
    private javax.swing.JComboBox<String> jComboBox5_startMonth;
    private javax.swing.JComboBox<String> jComboBox6_antNum3Time;
    private javax.swing.JComboBox<String> jComboBox6_startDate;
    private javax.swing.JComboBox<String> jComboBox7_antNum3Power;
    private javax.swing.JComboBox<String> jComboBox7_endYear;
    private javax.swing.JComboBox<String> jComboBox8;
    private javax.swing.JComboBox<String> jComboBox8_antNum4Time;
    private javax.swing.JComboBox<String> jComboBox9_antNum4Power;
    private javax.swing.JComboBox<String> jComboBox9_endMonth;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel21_priceBW;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10_date;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel8_car;
    private javax.swing.JPanel jPanel8_car_condition;
    private javax.swing.JPanel jPanel8_input;
    private javax.swing.JPanel jPanel9_select;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField10_PriceW;
    private javax.swing.JTextField jTextField11_totalWeight;
    private javax.swing.JTextField jTextField12_totalPrice;
    private javax.swing.JTextField jTextField2_car_text;
    private javax.swing.JTextField jTextField2_inputMessage;
    private javax.swing.JTextField jTextField2_labelCount;
    private javax.swing.JTextField jTextField3_WeightBR;
    private javax.swing.JTextField jTextField3_readCount;
    private javax.swing.JTextField jTextField4_PriceBR;
    private javax.swing.JTextField jTextField4_replayConnect;
    private javax.swing.JTextField jTextField5_WeightBW;
    private javax.swing.JTextField jTextField6_PriceBW;
    private javax.swing.JTextField jTextField7_WeightW;
    private javax.swing.JTextField jTextField8_PriceW;
    private javax.swing.JTextField jTextField9_WeightY;
    private javax.swing.JLabel 查询条件;
    // End of variables declaration//GEN-END:variables
}
